[{"path":"https://etam4260.github.io/rhud/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://etam4260.github.io/rhud/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to rhud","title":"Contributing to rhud","text":"outlines propose changes rhud…","code":""},{"path":"https://etam4260.github.io/rhud/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to rhud","text":"Typos grammatical errors package may edited using GitHub web interface.","code":""},{"path":"https://etam4260.github.io/rhud/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to rhud","text":"making substantial pull request, file issue get confirmation team member. ’ve found bug, create associated issue illustrate bug.","code":""},{"path":"https://etam4260.github.io/rhud/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to rhud","text":"create Git branch pull request (PR). README contain badges continuous integration services used package. team use roxygen2, Markdown syntax, documentation. team use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://etam4260.github.io/rhud/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to rhud","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://etam4260.github.io/rhud/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://etam4260.github.io/rhud/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://etam4260.github.io/rhud/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://etam4260.github.io/rhud/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://etam4260.github.io/rhud/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://etam4260.github.io/rhud/articles/Comprehensive-Housing-and-Affordability-Strategy.html","id":"program-overview","dir":"Articles","previous_headings":"","what":"Program Overview","title":"Comprehensive-Housing-and-Affordability-Strategy","text":"According (Consolidated Planning/CHAS Data | HUD USER), United States Department Housing Urban Development (HUD) gets custom tabulations American Community Survey (ACS) data United States Census Bureau every year. figures, dubbed “CHAS” (Comprehensive Housing Affordability Strategy), show scope housing issues needs, particularly among low-income households. Local governments utilize CHAS data plan spend HUD monies, HUD may use data distribute grant funds.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Comprehensive-Housing-and-Affordability-Strategy.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Comprehensive-Housing-and-Affordability-Strategy","text":"basic examples showing query Comprehensive Housing Affordability (CHAS) API. geoid query represents CHAS measurement particular geographic resolution. looking examples RECOMMEND first looking [parameters][Parameters] well [return data][Returns] located bottom page. (^ Currently work progress ^) functions main functions querying CHAS API different geographic resolutions. package also contains omni function encapsulates capabilities main function calls – omni-function nation state county mcd place","code":""},{"path":"https://etam4260.github.io/rhud/articles/Comprehensive-Housing-and-Affordability-Strategy.html","id":"comprehensive-housing-and-affordability-strategy-for-nation","dir":"Articles","previous_headings":"Examples","what":"Comprehensive Housing and Affordability Strategy for Nation","title":"Comprehensive-Housing-and-Affordability-Strategy","text":"","code":"library(rhud)   hud_chas_nation(year=c(\"2014-2018\"))"},{"path":"https://etam4260.github.io/rhud/articles/Comprehensive-Housing-and-Affordability-Strategy.html","id":"comprehensive-housing-and-affordability-strategy-for-states","dir":"Articles","previous_headings":"Examples","what":"Comprehensive Housing and Affordability Strategy for States","title":"Comprehensive-Housing-and-Affordability-Strategy","text":"","code":"# Queries for CHAS in a state   hud_chas_state(\"Maryland\", year=c(\"2012-2016\"))"},{"path":"https://etam4260.github.io/rhud/articles/Comprehensive-Housing-and-Affordability-Strategy.html","id":"comprehensive-housing-and-affordability-strategy-for-county","dir":"Articles","previous_headings":"Examples","what":"Comprehensive Housing and Affordability Strategy for County","title":"Comprehensive-Housing-and-Affordability-Strategy","text":"","code":"# Queries a county in Virginia   hud_chas_county(\"51999\", year=c(\"2014-2018\"))"},{"path":"https://etam4260.github.io/rhud/articles/Comprehensive-Housing-and-Affordability-Strategy.html","id":"comprehensive-housing-and-affordability-strategy-for-mcd","dir":"Articles","previous_headings":"Examples","what":"Comprehensive Housing and Affordability Strategy for MCD","title":"Comprehensive-Housing-and-Affordability-Strategy","text":"","code":"# Queries for CHAS for all mcds in Virginia   hud_chas_state_mcd(\"VA\", year=c(\"2014-2018\"))"},{"path":"https://etam4260.github.io/rhud/articles/Comprehensive-Housing-and-Affordability-Strategy.html","id":"comprehensive-housing-and-affordability-strategy-for-place","dir":"Articles","previous_headings":"Examples","what":"Comprehensive Housing and Affordability Strategy for Place","title":"Comprehensive-Housing-and-Affordability-Strategy","text":"","code":"# Queries for CHAS for all places in state fips code 51.   hud_chas_state_place(\"51\", year=c(\"2014-2018\"))"},{"path":"https://etam4260.github.io/rhud/articles/Comprehensive-Housing-and-Affordability-Strategy.html","id":"using-the-omni-function-for-querying","dir":"Articles","previous_headings":"","what":"Using the omni function for querying","title":"Comprehensive-Housing-and-Affordability-Strategy","text":"omni function requires specifying type can 1-12. type argument follows number scheme described [Input Arguments][]. also must use ‘query’ argument inputting geoids instead specific geoid names (.e county = 22031, cd = 7200) used functions. input arguments omni function closely follow API arguments provided HUD USER. Please type ‘?hud_chas’ terminal get details use .","code":"hud_chas(type = 1)    hud_chas(type = 2, 51)"},{"path":[]},{"path":"https://etam4260.github.io/rhud/articles/Comprehensive-Housing-and-Affordability-Strategy.html","id":"us-counties","dir":"Articles","previous_headings":"Querying for Geographic Identifers","what":"US Counties","title":"Comprehensive-Housing-and-Affordability-Strategy","text":"example show query counties MD, Virginia, California, respectively.","code":"hud_state_counties(\"MD\")  hud_state_counties(\"Virginia\")  hud_state_counties(\"6\")"},{"path":"https://etam4260.github.io/rhud/articles/Comprehensive-Housing-and-Affordability-Strategy.html","id":"us-minor-civil-divisions","dir":"Articles","previous_headings":"Querying for Geographic Identifers","what":"US Minor Civil Divisions","title":"Comprehensive-Housing-and-Affordability-Strategy","text":"example show query minor civil divisions Virginia California.","code":"hud_state_minor_civil_divisions(c(\"VA\", \"CA\"))"},{"path":"https://etam4260.github.io/rhud/articles/Comprehensive-Housing-and-Affordability-Strategy.html","id":"us-places","dir":"Articles","previous_headings":"Querying for Geographic Identifers","what":"US Places","title":"Comprehensive-Housing-and-Affordability-Strategy","text":"example show query places Wyoming Michigan","code":"hud_state_places(c(\"VA\", \"CA\"))"},{"path":"https://etam4260.github.io/rhud/articles/Comprehensive-Housing-and-Affordability-Strategy.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Comprehensive-Housing-and-Affordability-Strategy","text":"“Consolidated Planning/CHAS Data | HUD USER.” www.huduser.gov,      www.huduser.gov/portal/datasets/cp.html.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk-2.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Covid-19-and-Evictions-Crosswalk-2","text":"United States, housing advocates policymakers concerned sudden disruption household finances caused economic crisis related COVID-19 pandemic lead wave evictions tenants unable pay rents (Cowin, Martin, Stevens, 2020). certainly dramatic impact policies funding allocated areas US. Viewing 2016 eviction rankings locations across U.S., Richmond maintained high eviction rate past years. understand pandemic affecting evictions, collected weekly eviction filing data Richmond, provided Princeton’s Eviction Lab. mapping uses ggplot crosswalk files display COVID-19 cases well evictions based zip codes census tracts.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk-2.html","id":"loading-in-the-necessary-libraries","dir":"Articles","previous_headings":"","what":"Loading in the necessary libraries","title":"Covid-19-and-Evictions-Crosswalk-2","text":"improve performance, use tigris caching.","code":"library(rhud) library(sf) library(dplyr) library(scales) library(ggplot2) library(readr) library(lubridate)  options (digits=20) options(tigris_use_cache = TRUE)"},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk-2.html","id":"reading-in-data","dir":"Articles","previous_headings":"","what":"Reading in data","title":"Covid-19-and-Evictions-Crosswalk-2","text":"","code":"# Need to move these into the data folder in the R package and  # should download the shapefile using tigris package instead of loading  # from disk.  richmond_monthly_2020_2021 <- read_csv(\"Data/richmond_monthly_2020_2021.csv\") VA_COVID_19_PublicUseDataset_ZIPCode <- read_csv(\"Data/VA-COVID-19-PublicUseDataset-ZIPCode.csv\") richmondBoundary <- st_read(\"Data/cb_2018_us_zcta510_500k/cb_2018_us_zcta510_500k.shp\")"},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk-2.html","id":"cleaning-date-objects","dir":"Articles","previous_headings":"","what":"Cleaning date objects","title":"Covid-19-and-Evictions-Crosswalk-2","text":"","code":"VA_COVID_19_PublicUseDataset_ZIPCode$date <- lubridate::mdy(VA_COVID_19_PublicUseDataset_ZIPCode$`Report Date`)  VA_COVID_19_PublicUseDataset_ZIPCode$monthYear <- paste(as.character( lubridate::month(VA_COVID_19_PublicUseDataset_ZIPCode$date)), \"-\", as.character( lubridate::year(VA_COVID_19_PublicUseDataset_ZIPCode$date)), sep=\"\" ) VA_COVID_19_PublicUseDataset_ZIPCode$monthYear <- my(VA_COVID_19_PublicUseDataset_ZIPCode$monthYear)  VA_COVID_19_PublicUseDataset_ZIPCode$`Number of Cases` <- as.integer(VA_COVID_19_PublicUseDataset_ZIPCode$`Number of Cases`) covidCases <- aggregate(`Number of Cases` ~ monthYear + `ZIP Code`, data = VA_COVID_19_PublicUseDataset_ZIPCode, FUN = sum)"},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk-2.html","id":"aggregating-racial-majority","dir":"Articles","previous_headings":"","what":"Aggregating Racial Majority","title":"Covid-19-and-Evictions-Crosswalk-2","text":"","code":"eviction_race <- aggregate(`filings_2020` ~ month + GEOID + racial_majority,                            data = richmond_monthly_2020_2021, FUN = sum)  eviction_no_race <- aggregate(`filings_2020` ~ month + GEOID,                                data = richmond_monthly_2020_2021, FUN = sum)"},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk-2.html","id":"aggregating-covid-cases","dir":"Articles","previous_headings":"","what":"Aggregating Covid Cases","title":"Covid-19-and-Evictions-Crosswalk-2","text":"","code":"covidCases_spatial <- aggregate(`Number of Cases` ~ `ZIP Code`,                                 FUN = sum, data = covidCases)  covidCases_temporal <- aggregate(`Number of Cases` ~ monthYear,                                  FUN = sum, data = covidCases) eviction_no_race_spatial <- aggregate(filings_2020 ~ GEOID,                                       FUN = sum, data = eviction_no_race)  eviction_no_race_temporal <- aggregate(filings_2020 ~ month,                                        FUN = sum, data = eviction_no_race)  eviction_no_race_temporal$month <- my(eviction_no_race_temporal$month)"},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk-2.html","id":"section","dir":"Articles","previous_headings":"","what":"Covid-19-and-Evictions-Crosswalk-2","title":"Covid-19-and-Evictions-Crosswalk-2","text":"","code":"richmond <- inner_join(richmondBoundary,eviction_no_race_spatial,                         by = c(\"ZCTA5CE10\" = \"GEOID\" ))  richmond <- inner_join(richmond,covidCases_spatial,                         by = c(\"ZCTA5CE10\" = \"ZIP Code\" ))"},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk-2.html","id":"mapping-covid-cases-by-zip-code","dir":"Articles","previous_headings":"","what":"Mapping COVID cases by zip code","title":"Covid-19-and-Evictions-Crosswalk-2","text":"","code":"ggplot() +   geom_sf(data = richmond, aes(fill= `Number of Cases`), size = 0.1, colour = \"grey\") +    scale_fill_gradient2(low = \"grey\", mid = \"white\", high = \"darkred\", labels = comma) +   ggtitle(\"Covid-19 Case in Richmond, VA during 2020-2021, by zipcode\") +   coord_sf() +   theme(plot.title = element_text(face = \"bold\"),         axis.text.x = element_blank(),          axis.text.y = element_blank(),         axis.ticks = element_blank(),     panel.background = element_rect(fill = \"white\"))"},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk-2.html","id":"mapping-eviction-filings-by-zip-code","dir":"Articles","previous_headings":"","what":"Mapping Eviction filings by zip code","title":"Covid-19-and-Evictions-Crosswalk-2","text":"","code":"ggplot() +   geom_sf(data = richmond, aes(fill= `filings_2020`), size = 0.1, colour = \"grey\") +    scale_fill_gradient2() +   ggtitle(\"Eviction Case in Richmond, VA during 2020-2021, by zipcode\") +   coord_sf() +   theme(plot.title = element_text(face = \"bold\"),         axis.text.x = element_blank(),          axis.text.y = element_blank(),         axis.ticks = element_blank(),     panel.background = element_rect(fill = \"white\"))"},{"path":[]},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk-2.html","id":"mapping-covid-cases-and-eviction-filings-by-census-tracts","dir":"Articles","previous_headings":"Utilizing the crosswalk files","what":"Mapping COVID cases and Eviction Filings by Census Tracts","title":"Covid-19-and-Evictions-Crosswalk-2","text":"","code":"richmond$ZCTA5CE10 <- as.numeric(richmond$ZCTA5CE10) a = as.data.frame(richmond) covidcases_cw <- crosswalk(data = a, geoid = \"zip\", geoid_col = \"ZCTA5CE10\",           cw_geoid = \"tract\", cw_geoid_col = \"Number of Cases\", method = \"tot\")  evi_cw <- crosswalk(data = a, geoid = \"zip\", geoid_col = \"ZCTA5CE10\",           cw_geoid = \"tract\", cw_geoid_col = \"filings_2020\", method = \"tot\") evi_tract <- aggregate(filings_2020 ~ tract, FUN = sum, data = evi_cw) evi_tract$filings_2020 <- as.integer(evi_tract$filings_2020)  cov_tract <- aggregate(`Number of Cases` ~ tract, FUN = sum, data = covidcases_cw) cov_tract$`Number of Cases` <- as.integer(cov_tract$`Number of Cases`) census2020 <- st_read(\"Data/tl_2021_51_tract/tl_2021_51_tract.shp\") evi <- inner_join(census2020, evi_tract, by = c(\"GEOID\" = \"tract\")) covid <- inner_join(census2020, cov_tract, by = c(\"GEOID\" = \"tract\")) ggplot() +   geom_sf(data = covid, aes(fill= `Number of Cases`), size = 0.1, colour = \"grey\") +    scale_fill_gradient2(low = \"grey\", high = \"darkred\", labels = comma) +   ggtitle(\"Covid Case in Richmond, VA during 2020-2021, by census tract\") +   coord_sf() +   theme(plot.title = element_text(face = \"bold\"),         axis.text.x = element_blank(),          axis.text.y = element_blank(),         axis.ticks = element_blank(),     panel.background = element_rect(fill = \"white\")) ggplot() +   geom_sf(data = evi, aes(fill= `filings_2020`), size = 0.1, colour = \"grey\") +    scale_fill_gradient2() +   ggtitle(\"Eviction Case in Richmond, VA during 2020-2021, by census tract\") +   coord_sf() +   theme(plot.title = element_text(face = \"bold\"),         axis.text.x = element_blank(),          axis.text.y = element_blank(),         axis.ticks = element_blank(),     panel.background = element_rect(fill = \"white\"))"},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk-2.html","id":"observations","dir":"Articles","previous_headings":"Utilizing the crosswalk files","what":"Observations","title":"Covid-19-and-Evictions-Crosswalk-2","text":"noteworthy point, number COVID eviction filings significantly correlated. Meanwhile, crosswalking data zip codes census tracts yielded less accurate results. appeared discrete even N/results COVID cases census tracts. Therefore, noted considerations crosswalking data smaller geographies, particularly census tracts. fundamental reason zip codes cross-cut numerous tracts follow boundaries closely.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Covid-19-and-Evictions-Crosswalk","text":"ZIP Codes widely used delivering service, mapping spatial analyses. However, problematic effect since ZIP Codes’ boundaries created analytical purposes. effect notorious distorting policy-related analysis misrepresentative results inaccurate patterns displayed map (Wilson Din, 2018). HUD ZIP Code crosswalk files aim allocate address locations ZIP Codes geographies vice versa. Specifically, merging aggregated data ZIP Code level existing data sets get informative data analysis (Din Wilson, 2020). following example demonstrates use crosswalk function display COVID-19 cases evictions based zip codes census tracts. Weekly eviction filing data Richmond, provided Princeton’s Eviction Lab, COVID-19 data set, downloaded Virginia Open Data Portal.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk.html","id":"loading-in-the-necessary-libraries","dir":"Articles","previous_headings":"Overview","what":"Loading in the necessary libraries","title":"Covid-19-and-Evictions-Crosswalk","text":"improve performance, use tigris caching.","code":"library(rhud) library(sf) library(dplyr) library(scales) library(ggplot2) library(lubridate) options (digits=20) options(tigris_use_cache = TRUE)"},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk.html","id":"reading-in-data","dir":"Articles","previous_headings":"Overview","what":"Reading in data","title":"Covid-19-and-Evictions-Crosswalk","text":"Cleaning date objects Aggregating racial majority based eviction fillings data Aggregating classifying COVID cases eviction data based spatial temporal condition","code":"library(readr) richmond_monthly_2020_2021 <- read_csv(\"Data/richmond_monthly_2020_2021.csv\") VA_COVID_19_PublicUseDataset_ZIPCode <- read_csv(\"Data/VA-COVID-19-PublicUseDataset-ZIPCode.csv\")  # Using tigris package to download Richmond shapefiles richmond_shapefile_zctas <- tigris::zctas(cb = FALSE, starts_with = \"23\") richmond_shapefile_tracts <- tigris::tracts(state = \"51\", county = \"760\", cb = TRUE) VA_COVID_19_PublicUseDataset_ZIPCode$date <- lubridate::mdy(VA_COVID_19_PublicUseDataset_ZIPCode$`Report Date`)  VA_COVID_19_PublicUseDataset_ZIPCode$monthYear <- paste(as.character( lubridate::month(VA_COVID_19_PublicUseDataset_ZIPCode$date)), \"-\", as.character( lubridate::year(VA_COVID_19_PublicUseDataset_ZIPCode$date)), sep=\"\" )  VA_COVID_19_PublicUseDataset_ZIPCode$monthYear <- my(VA_COVID_19_PublicUseDataset_ZIPCode$monthYear)  VA_COVID_19_PublicUseDataset_ZIPCode$`Number of Cases` <- as.integer(VA_COVID_19_PublicUseDataset_ZIPCode$`Number of Cases`) #> Warning: NAs introduced by coercion  # Aggregating a new data frame with number of cases, monthYear, and ZIP code covidCases <- aggregate(`Number of Cases` ~ monthYear + `ZIP Code`, data = VA_COVID_19_PublicUseDataset_ZIPCode, FUN = sum) eviction_race <- aggregate(`filings_2020` ~ month + GEOID + racial_majority, data = richmond_monthly_2020_2021, FUN = sum) eviction_no_race <- aggregate(`filings_2020` ~ month + GEOID, data = richmond_monthly_2020_2021, FUN = sum) covidCases_spatial <- aggregate(`Number of Cases` ~ `ZIP Code`, data = covidCases, FUN = sum) covidCases_temporal <- aggregate(`Number of Cases` ~ monthYear, data = covidCases, FUN = sum)  eviction_no_race_spatial <- aggregate(filings_2020 ~ GEOID, data = eviction_no_race, FUN = sum) eviction_no_race_temporal <- aggregate(filings_2020 ~ month, data = eviction_no_race, FUN = sum) eviction_no_race_temporal$month <- my(eviction_no_race_temporal$month)"},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk.html","id":"mapping-covid-cases-and-eviction-filings-by-zip-codes","dir":"Articles","previous_headings":"Overview","what":"Mapping COVID cases and Eviction Filings by ZIP Codes","title":"Covid-19-and-Evictions-Crosswalk","text":"","code":"richmond <- inner_join(richmond_shapefile_zctas, eviction_no_race_spatial, by = c(\"ZCTA5CE20\" = \"GEOID\" )) richmond <- inner_join(richmond, covidCases_spatial, by = c(\"ZCTA5CE20\" = \"ZIP Code\" )) ggplot() +   geom_sf(data = richmond, aes(fill= `Number of Cases`), size = 0.1, colour = \"grey\") +    scale_fill_gradient2(low = \"grey\", mid = \"white\", high = \"darkred\", labels = comma) +   ggtitle(\"Covid-19 Case in Richmond, VA during 2020-2021, by zipcode\") +   coord_sf() +   theme(plot.title = element_text(face = \"bold\"),         axis.text.x = element_blank(),          axis.text.y = element_blank(),         axis.ticks = element_blank(),     panel.background = element_rect(fill = \"white\")) ggplot() +   geom_sf(data = richmond, aes(fill= `filings_2020`), size = 0.1, colour = \"grey\") +    scale_fill_gradient2() +   ggtitle(\"Eviction Filings in Richmond, VA during 2020-2021, by zipcode\") +   coord_sf() +   theme(plot.title = element_text(face = \"bold\"),         axis.text.x = element_blank(),          axis.text.y = element_blank(),         axis.ticks = element_blank(),     panel.background = element_rect(fill = \"white\")) richmondTemporal <- inner_join(eviction_no_race_temporal, covidCases_temporal, by = c(\"month\" = \"monthYear\")) colnames(richmondTemporal) <- c(\"Date\", \"Eviction\",\"CovidCase\") options(scipen = 999) ggplot(richmondTemporal, aes(Date)) +    geom_line(aes(y = CovidCase),color = \"red\") + theme(axis.line = element_line(colour = \"black\"),       panel.background = element_blank()) ggplot(richmondTemporal, aes(Date)) +    geom_line(aes(y = Eviction), col = \"blue\") +   theme(axis.line = element_line(colour = \"black\"),         panel.background = element_blank()) Although the number of COVID cases and eviction filings does not appear to be positively related, in particular, eviction filings have almost returned to their pre-pandemic levels but increased in the early month of 2021 in Richmond. It provides an idea of what factors lead to changes in eviction."},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk.html","id":"mapping-covid-cases-and-eviction-filings-by-census-tracts","dir":"Articles","previous_headings":"Overview","what":"Mapping COVID cases and Eviction Filings by Census Tracts","title":"Covid-19-and-Evictions-Crosswalk","text":"Crosswalk zipcode census tract Aggregating date census tract level","code":"richmond$ZCTA5CE20 <- as.numeric(richmond$ZCTA5CE20) a = as.data.frame(richmond) covidcases_cw <- crosswalk(data = a, geoid = \"zip\", geoid_col = \"ZCTA5CE20\",           cw_geoid = \"tract\", cw_geoid_col = \"Number of Cases\", method = \"tot\")  evi_cw <- crosswalk(data = a, geoid = \"zip\", geoid_col = \"ZCTA5CE20\",           cw_geoid = \"tract\", cw_geoid_col = \"filings_2020\", method = \"tot\") evi_tract <- aggregate(filings_2020 ~ tract, data = evi_cw, FUN = sum) evi_tract$filings_2020 <- as.integer(evi_tract$filings_2020)  cov_tract <- aggregate(`Number of Cases` ~ tract, data = covidcases_cw, FUN = sum) cov_tract$`Number of Cases` <- as.integer(cov_tract$`Number of Cases`) evi <- inner_join(richmond_shapefile_tracts, evi_tract, by = c(\"GEOID\" = \"tract\")) covid <- inner_join(richmond_shapefile_tracts, cov_tract, by = c(\"GEOID\" = \"tract\")) ggplot() +   geom_sf(data = covid, aes(fill= `Number of Cases`), size = 0.1, colour = \"grey\") +    scale_fill_gradient2(low = \"grey\", high = \"darkred\", labels = comma) +   ggtitle(\"Covid Case in Richmond, VA during 2020-2021, by census tract\") +   coord_sf() +   theme(plot.title = element_text(face = \"bold\"),         axis.text.x = element_blank(),          axis.text.y = element_blank(),         axis.ticks = element_blank(),     panel.background = element_rect(fill = \"white\")) ggplot() +   geom_sf(data = evi, aes(fill= `filings_2020`), size = 0.1, colour = \"grey\") +    scale_fill_gradient2() +   ggtitle(\"Eviction Filings in Richmond, VA during 2020-2021, by census tract\") +   coord_sf() +   theme(plot.title = element_text(face = \"bold\"),         axis.text.x = element_blank(),          axis.text.y = element_blank(),         axis.ticks = element_blank(),     panel.background = element_rect(fill = \"white\"))"},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk.html","id":"observations","dir":"Articles","previous_headings":"","what":"Observations","title":"Covid-19-and-Evictions-Crosswalk","text":"noteworthy point, number COVID eviction filings significantly correlated. fact, 2021, Richmond remained 25% historical average (Hepburn, Jin, & Fish et al., 2022). answer number eviction filings Richmond changed pandemic, combing time, CDC moratorium expiration might significant reason. Since September 4, 2020, July 31, 2021, CDC’s moratorium evictions rent assistance tenants landlords helped prevent least 1.55 million eviction filings nationwide (Rangel, Haas, Lemmerman et al., 2021). Meanwhile, crossing data ZIP Codes census tracts yielded less accurate results. got discrete even N/results COVID cases census tracts. Therefore, noted considerations crosswalking data smaller geographies, particularly census tracts. fundamental reason ZIP Codes cross-cut numerous tracts follow boundaries closely (Din Wilson, 2020).","code":""},{"path":"https://etam4260.github.io/rhud/articles/Covid-19-and-Evictions-Crosswalk.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Covid-19-and-Evictions-Crosswalk","text":"CDC. “CDC Issues Eviction Moratorium Order Areas Substantial High Transmission.” https://www.cdc.gov/media/releases/2021/s0803-cdc-eviction-order.html (Accessed 05/12/2022) Din, Alexander, Ron Wilson. “Crosswalking ZIP Codes Census Geographies.” Cityscape 22, . 1 (2020): 293-314. Jasmine Rangel, Jacob Haas, Emily Lemmerman, et al. “Preliminary Analysis: 11 Months CDC Moratorium.” Eviction Lab. https://evictionlab.org/eleven-months-cdc/. (Accessed 05/12/2022) Peter Hepburn, Olivia Jin, Joe Fish, et al. “Preliminary Analysis: Eviction Filing Patterns 2021.” Eviction Lab. https://evictionlab.org/us-eviction-filing-patterns-2021/. (Accessed 05/14/2022) Peter Hepburn, Renee Louis, Matthew Desmond. Eviction Tracking System: Version 1.0. Princeton: Princeton University, 2020. www.evictionlab.org. (Accessed 05/01/2022) Virginia Open Data Portal. VDH-COVID-19-PublicUseDataset-ZIPCode. https://data.virginia.gov/Government/VDH-COVID-19-PublicUseDataset-ZIPCode/8bkr-zfqv/data. (Accessed 05/01/2022) Wilson, Ron, Alexander Din. “Understanding enhancing US Department housing urban development’s ZIP code crosswalk files.” Cityscape 20, . 2 (2018): 277-294.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Crosswalk-a-Dataset.html","id":"obtaining-a-sample-dataset","dir":"Articles","previous_headings":"","what":"Obtaining a sample dataset","title":"Crosswalk-a-Dataset","text":"need powerful method crosswalking semi-large datasets allocating fields based provided ratios, crosswalk() function available. sample dataset contains population information counties Washington, Wicomico, Worchester Maryland year 2019 according US Census Bureau.","code":"library(rhud) #>  #> rhud: #> ------------------------------------------------------------------------------------------ #> * To begin, first obtain a key from HUD User website at `https://www.huduser.gov/hudapi/public/login` #> * To set the key, use hud_set_key(\"your-key\") #> * To get tibbles instead of dataframes, use `options(rhud_use_tibble = TRUE)` #> * Caching is enabled by default. To set a new cache directory use hud_set_cache_dir(). #> * To delete cached items, use hud_clear_cache() #> * Set these in your R script for single session or in .Rprofile for persistence. #> * For more information on how to use this package, visit `https://etam4260.github.io/rhud/index.html` #> ---------------------------------------------------------------------------------------- #>  #> * Setting rhud cache to R temp directory. options (digits=4)  sample <- data.frame(pop = c(151049, 103609, 52276),                      county = c(\"24043\", \"24045\", \"24047\"))  head(sample) #>      pop county #> 1 151049  24043 #> 2 103609  24045 #> 3  52276  24047"},{"path":"https://etam4260.github.io/rhud/articles/Crosswalk-a-Dataset.html","id":"merging-with-a-crosswalk-file","dir":"Articles","previous_headings":"","what":"Merging with a crosswalk file","title":"Crosswalk-a-Dataset","text":"Lets say wanted know population zipcode level (likely already dataset ), utilizing crosswalk files case can provide little insight effectiveness truth answers available compare. case care using county zip code crosswalk measurements year 2019 first quarter year. merge dataset associated crosswalk measurement use: seen data , zipcode associated county assigned population value.","code":"crosswalk(data = sample, geoid = \"county\", geoid_col = \"county\",            cw_geoid = \"zip\", cw_geoid_col = NA, method = NA, year = 2019           , quarter = 1) #>  Downloading:    [=================---------------------------------]    33% 1/3 0   usps?type=7&query=24043&year=2019&quarter=1 Downloading:    [=================================-----------------]    67% 2/3 0   usps?type=7&query=24045&year=2019&quarter=1 Downloading:    [==================================================]    100%    3/3 0   usps?type=7&query=24047&year=2019&quarter=1 #>  #>  #> * No method or cw_geoid_col specified: will just merge the datasets. #>    county   zip res_ratio bus_ratio oth_ratio tot_ratio year quarter    pop #> 1   24043 21740 4.154e-01 0.5855329 0.6520012 4.388e-01 2019       1 151049 #> 2   24043 21742 2.269e-01 0.2051453 0.2022609 2.242e-01 2019       1 151049 #> 3   24043 21795 7.331e-02 0.0689943 0.0498014 7.197e-02 2019       1 151049 #> 4   24043 21713 5.965e-02 0.0295690 0.0192484 5.558e-02 2019       1 151049 #> 5   24043 21783 4.411e-02 0.0126963 0.0033608 3.993e-02 2019       1 151049 #> 6   24043 21722 3.437e-02 0.0075175 0.0030553 3.094e-02 2019       1 151049 #> 7   24043 21750 2.974e-02 0.0414300 0.0262756 3.051e-02 2019       1 151049 #> 8   24043 21782 2.497e-02 0.0046776 0.0009166 2.237e-02 2019       1 151049 #> 9   24043 21756 2.179e-02 0.0018376 0.0009166 1.934e-02 2019       1 151049 #> 10  24043 21767 1.567e-02 0.0145339 0.0137489 1.550e-02 2019       1 151049 #> 11  24043 21719 1.093e-02 0.0030070 0.0265811 1.098e-02 2019       1 151049 #> 12  24043 21734 1.081e-02 0.0150351 0.0012221 1.073e-02 2019       1 151049 #> 13  24043 21758 1.118e-02 0.0030070 0.0006111 1.010e-02 2019       1 151049 #> 14  24043 21733 6.992e-03 0.0021717 0.0000000 6.318e-03 2019       1 151049 #> 15  24043 21711 6.903e-03 0.0015035 0.0000000 6.187e-03 2019       1 151049 #> 16  24043 21779 5.866e-03 0.0016706 0.0000000 5.289e-03 2019       1 151049 #> 17  24043 21715 5.481e-04 0.0001671 0.0000000 4.950e-04 2019       1 151049 #> 18  24043 21780 4.740e-04 0.0000000 0.0000000 4.168e-04 2019       1 151049 #> 19  24043 21769 2.370e-04 0.0003341 0.0000000 2.345e-04 2019       1 151049 #> 20  24043 21720 2.963e-05 0.0001671 0.0000000 3.908e-05 2019       1 151049 #> 21  24043 21746 0.000e+00 0.0005012 0.0000000 3.908e-05 2019       1 151049 #> 22  24043 21755 1.481e-05 0.0000000 0.0000000 1.303e-05 2019       1 151049 #> 23  24043 21781 0.000e+00 0.0001671 0.0000000 1.303e-05 2019       1 151049 #> 24  24043 21721 0.000e+00 0.0001671 0.0000000 1.303e-05 2019       1 151049 #> 25  24043 21741 0.000e+00 0.0001671 0.0000000 1.303e-05 2019       1 151049 #> 26  24045 21804 3.617e-01 0.2666006 0.4497751 3.574e-01 2019       1 103609 #> 27  24045 21801 2.563e-01 0.4428147 0.4677661 2.830e-01 2019       1 103609 #> 28  24045 21826 6.512e-02 0.0471754 0.0228636 6.152e-02 2019       1 103609 #> 29  24045 21875 6.282e-02 0.0243806 0.0356072 5.809e-02 2019       1 103609 #> 30  24045 21802 4.247e-02 0.1117939 0.0007496 4.670e-02 2019       1 103609 #> 31  24045 21830 3.543e-02 0.0059465 0.0018741 3.121e-02 2019       1 103609 #> 32  24045 21849 3.141e-02 0.0053518 0.0052474 2.784e-02 2019       1 103609 #> 33  24045 21850 2.981e-02 0.0114965 0.0089955 2.719e-02 2019       1 103609 #> 34  24045 21837 2.548e-02 0.0105055 0.0026237 2.306e-02 2019       1 103609 #> 35  24045 21874 2.180e-02 0.0073340 0.0022489 1.958e-02 2019       1 103609 #> 36  24045 21803 1.634e-02 0.0537166 0.0003748 1.893e-02 2019       1 103609 #> 37  24045 21822 1.714e-02 0.0043608 0.0007496 1.522e-02 2019       1 103609 #> 38  24045 21856 9.956e-03 0.0033697 0.0000000 8.897e-03 2019       1 103609 #> 39  24045 21861 8.827e-03 0.0001982 0.0011244 7.692e-03 2019       1 103609 #> 40  24045 21865 5.789e-03 0.0025768 0.0000000 5.228e-03 2019       1 103609 #> 41  24045 21840 5.112e-03 0.0011893 0.0000000 4.519e-03 2019       1 103609 #> 42  24045 21814 4.434e-03 0.0005946 0.0000000 3.881e-03 2019       1 103609 #> 43  24045 21852 0.000e+00 0.0003964 0.0000000 3.545e-05 2019       1 103609 #> 44  24045 21810 0.000e+00 0.0001982 0.0000000 1.772e-05 2019       1 103609 #> 45  24047 21842 5.302e-01 0.4559211 0.8379953 5.443e-01 2019       1  52276 #> 46  24047 21811 2.832e-01 0.2535088 0.0927739 2.696e-01 2019       1  52276 #> 47  24047 21851 5.434e-02 0.0881579 0.0417249 5.577e-02 2019       1  52276 #> 48  24047 21843 4.340e-02 0.1065789 0.0009324 4.491e-02 2019       1  52276 #> 49  24047 21863 3.859e-02 0.0660088 0.0205128 3.927e-02 2019       1  52276 #> 50  24047 21813 2.390e-02 0.0160088 0.0048951 2.221e-02 2019       1  52276 #> 51  24047 21841 7.577e-03 0.0041667 0.0004662 6.918e-03 2019       1  52276 #> 52  24047 21872 6.003e-03 0.0039474 0.0004662 5.528e-03 2019       1  52276 #> 53  24047 21864 4.920e-03 0.0017544 0.0000000 4.411e-03 2019       1  52276 #> 54  24047 21829 3.411e-03 0.0008772 0.0000000 3.036e-03 2019       1  52276 #> 55  24047 21804 1.804e-03 0.0004386 0.0000000 1.604e-03 2019       1  52276 #> 56  24047 21862 1.263e-03 0.0024123 0.0002331 1.275e-03 2019       1  52276 #> 57  24047 21822 1.361e-03 0.0000000 0.0000000 1.189e-03 2019       1  52276 #> 58  24047 21792 0.000e+00 0.0002193 0.0000000 1.432e-05 2019       1  52276"},{"path":"https://etam4260.github.io/rhud/articles/Crosswalk-a-Dataset.html","id":"merging-and-applying-a-crosswalk-method","dir":"Articles","previous_headings":"","what":"Merging and applying a crosswalk method","title":"Crosswalk-a-Dataset","text":"utilize allocation method provided crosswalk files, specify method cw_geoid_col arguments. case want allocate county population levels zip code level using method based ratio residential addresses. seen population field, now partitioned based ratio residential addresses zip code comprises county.","code":"crosswalk(data = sample, geoid = \"county\", geoid_col = \"county\",            cw_geoid = \"zip\", cw_geoid_col = \"pop\", method = \"res\", year = 2019           , quarter = 1) #>  Downloading:    [=================---------------------------------]    33% 1/3 0   usps?type=7&query=24043&year=2019&quarter=1 Downloading:    [=================================-----------------]    67% 2/3 0   usps?type=7&query=24045&year=2019&quarter=1 Downloading:    [==================================================]    100%    3/3 0   usps?type=7&query=24047&year=2019&quarter=1 #>  #>  #> * Applying allocation method based onresidential address percentage. #>    county   zip res_ratio bus_ratio oth_ratio tot_ratio year quarter       pop #> 1   24043 21740 4.154e-01 0.5855329 0.6520012 4.388e-01 2019       1 62751.933 #> 2   24043 21742 2.269e-01 0.2051453 0.2022609 2.242e-01 2019       1 34280.196 #> 3   24043 21795 7.331e-02 0.0689943 0.0498014 7.197e-02 2019       1 11073.212 #> 4   24043 21713 5.965e-02 0.0295690 0.0192484 5.558e-02 2019       1  9010.270 #> 5   24043 21783 4.411e-02 0.0126963 0.0033608 3.993e-02 2019       1  6663.170 #> 6   24043 21722 3.437e-02 0.0075175 0.0030553 3.094e-02 2019       1  5190.918 #> 7   24043 21750 2.974e-02 0.0414300 0.0262756 3.051e-02 2019       1  4492.829 #> 8   24043 21782 2.497e-02 0.0046776 0.0009166 2.237e-02 2019       1  3772.365 #> 9   24043 21756 2.179e-02 0.0018376 0.0009166 1.934e-02 2019       1  3291.310 #> 10  24043 21767 1.567e-02 0.0145339 0.0137489 1.550e-02 2019       1  2367.238 #> 11  24043 21719 1.093e-02 0.0030070 0.0265811 1.098e-02 2019       1  1651.249 #> 12  24043 21734 1.081e-02 0.0150351 0.0012221 1.073e-02 2019       1  1633.349 #> 13  24043 21758 1.118e-02 0.0030070 0.0006111 1.010e-02 2019       1  1689.286 #> 14  24043 21733 6.992e-03 0.0021717 0.0000000 6.318e-03 2019       1  1056.083 #> 15  24043 21711 6.903e-03 0.0015035 0.0000000 6.187e-03 2019       1  1042.659 #> 16  24043 21779 5.866e-03 0.0016706 0.0000000 5.289e-03 2019       1   886.036 #> 17  24043 21715 5.481e-04 0.0001671 0.0000000 4.950e-04 2019       1    82.786 #> 18  24043 21780 4.740e-04 0.0000000 0.0000000 4.168e-04 2019       1    71.599 #> 19  24043 21769 2.370e-04 0.0003341 0.0000000 2.345e-04 2019       1    35.799 #> 20  24043 21720 2.963e-05 0.0001671 0.0000000 3.908e-05 2019       1     4.475 #> 21  24043 21746 0.000e+00 0.0005012 0.0000000 3.908e-05 2019       1     0.000 #> 22  24043 21755 1.481e-05 0.0000000 0.0000000 1.303e-05 2019       1     2.237 #> 23  24043 21781 0.000e+00 0.0001671 0.0000000 1.303e-05 2019       1     0.000 #> 24  24043 21721 0.000e+00 0.0001671 0.0000000 1.303e-05 2019       1     0.000 #> 25  24043 21741 0.000e+00 0.0001671 0.0000000 1.303e-05 2019       1     0.000 #> 26  24045 21804 3.617e-01 0.2666006 0.4497751 3.574e-01 2019       1 37479.352 #> 27  24045 21801 2.563e-01 0.4428147 0.4677661 2.830e-01 2019       1 26557.357 #> 28  24045 21826 6.512e-02 0.0471754 0.0228636 6.152e-02 2019       1  6746.751 #> 29  24045 21875 6.282e-02 0.0243806 0.0356072 5.809e-02 2019       1  6508.531 #> 30  24045 21802 4.247e-02 0.1117939 0.0007496 4.670e-02 2019       1  4400.703 #> 31  24045 21830 3.543e-02 0.0059465 0.0018741 3.121e-02 2019       1  3671.152 #> 32  24045 21849 3.141e-02 0.0053518 0.0052474 2.784e-02 2019       1  3254.265 #> 33  24045 21850 2.981e-02 0.0114965 0.0089955 2.719e-02 2019       1  3088.362 #> 34  24045 21837 2.548e-02 0.0105055 0.0026237 2.306e-02 2019       1  2639.571 #> 35  24045 21874 2.180e-02 0.0073340 0.0022489 1.958e-02 2019       1  2258.843 #> 36  24045 21803 1.634e-02 0.0537166 0.0003748 1.893e-02 2019       1  1693.069 #> 37  24045 21822 1.714e-02 0.0043608 0.0007496 1.522e-02 2019       1  1776.021 #> 38  24045 21856 9.956e-03 0.0033697 0.0000000 8.897e-03 2019       1  1031.581 #> 39  24045 21861 8.827e-03 0.0001982 0.0011244 7.692e-03 2019       1   914.597 #> 40  24045 21865 5.789e-03 0.0025768 0.0000000 5.228e-03 2019       1   599.806 #> 41  24045 21840 5.112e-03 0.0011893 0.0000000 4.519e-03 2019       1   529.616 #> 42  24045 21814 4.434e-03 0.0005946 0.0000000 3.881e-03 2019       1   459.426 #> 43  24045 21852 0.000e+00 0.0003964 0.0000000 3.545e-05 2019       1     0.000 #> 44  24045 21810 0.000e+00 0.0001982 0.0000000 1.772e-05 2019       1     0.000 #> 45  24047 21842 5.302e-01 0.4559211 0.8379953 5.443e-01 2019       1 27719.003 #> 46  24047 21811 2.832e-01 0.2535088 0.0927739 2.696e-01 2019       1 14804.331 #> 47  24047 21851 5.434e-02 0.0881579 0.0417249 5.577e-02 2019       1  2840.491 #> 48  24047 21843 4.340e-02 0.1065789 0.0009324 4.491e-02 2019       1  2268.620 #> 49  24047 21863 3.859e-02 0.0660088 0.0205128 3.927e-02 2019       1  2017.408 #> 50  24047 21813 2.390e-02 0.0160088 0.0048951 2.221e-02 2019       1  1249.199 #> 51  24047 21841 7.577e-03 0.0041667 0.0004662 6.918e-03 2019       1   396.108 #> 52  24047 21872 6.003e-03 0.0039474 0.0004662 5.528e-03 2019       1   313.800 #> 53  24047 21864 4.920e-03 0.0017544 0.0000000 4.411e-03 2019       1   257.213 #> 54  24047 21829 3.411e-03 0.0008772 0.0000000 3.036e-03 2019       1   178.334 #> 55  24047 21804 1.804e-03 0.0004386 0.0000000 1.604e-03 2019       1    94.311 #> 56  24047 21862 1.263e-03 0.0024123 0.0002331 1.275e-03 2019       1    66.018 #> 57  24047 21822 1.361e-03 0.0000000 0.0000000 1.189e-03 2019       1    71.162 #> 58  24047 21792 0.000e+00 0.0002193 0.0000000 1.432e-05 2019       1     0.000"},{"path":"https://etam4260.github.io/rhud/articles/Fair-Market-Rents.html","id":"program-overview","dir":"Articles","previous_headings":"","what":"Program Overview","title":"Fair-Market-Rents","text":"According (Fair Market Rents | HUD USER), Fair Market Rents (FMRs) used calculate payment standard amounts Housing Choice Voucher program, initial renewal rents expiring project-based Section 8 contracts, initial rents housing assistance payment (HAP) contracts Moderate Rehabilitation Single Room Occupancy program (Mod Rehab), rent ceilings rental units HOME Investment Partnerships program Emergency Solution Grants program, rent ceilings rental units HOME Investment Partnerships program Emergency Solution Grant. Furthermore, United States Department Housing Urban Development (HUD) calculates FMRs metropolitan areas defined Office Management Budget (OMB), HUD-designated subdivisions OMB metropolitan areas, non-metropolitan county annual basis. FMRs must posted least 30 days go effect, must go force beginning federal fiscal year (usually October 1). Fair Market Rentals estimates 40th percentile gross rents standard quality units within metropolitan region non-metropolitan county, described 24 CFR 888.113.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Fair-Market-Rents.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Fair-Market-Rents","text":"basic examples show query Fair Market Rents API. looking examples RECOMMEND first looking parameters well return data located bottom page. Disclaimer: output tables large displayed choose leave . Querying county cbsa code considered small areas return data zip code level. small areas, give singular measurement entire county cbsa. Lets say working county level data – mixing together (counties small areas small areas) counties small areas NA zip_code, meaning measurement defined county level. counties small areas return zip code data zip_code field.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Fair-Market-Rents.html","id":"state-level-fair-market-rents","dir":"Articles","previous_headings":"Examples","what":"State Level Fair Market Rents","title":"Fair-Market-Rents","text":"example shows query Fair Market Rents API state. can use state abbreviation, state name, state fips code. return counties state Fair Market Rents well metroareas state Fair Market Rents. need county level data, might work better… need just metro data…","code":"# These functions gets FMR data for the state of Virginia in 2021. hud_fmr(query = 'VA', year = '2021')  hud_fmr(query= \"Virginia\", year = '2021')  hud_fmr(query= \"51\", year = '2021') # These functions gets FMR data for the state of Virginia in 2021 for counties. hud_fmr_state_counties(state = 'VA', year = '2021')  hud_fmr_state_counties(state = \"Virginia\", year = '2021')  hud_fmr_state_counties(state = \"51\", year = '2021') # These functions gets FMR data for the state of Virginia in 2021 for metroareas. hud_fmr_state_metroareas(state = 'VA', year = '2021')  hud_fmr_state_metroareas(state = \"Virginia\", year = '2021')  hud_fmr_state_metroareas(state = \"51\", year = '2021')"},{"path":"https://etam4260.github.io/rhud/articles/Fair-Market-Rents.html","id":"county-level-fair-market-rents","dir":"Articles","previous_headings":"Examples","what":"County Level Fair Market Rents","title":"Fair-Market-Rents","text":"example shows query Fair Market Rents county level basis. defined 2 digit state code + 3 digit county code. also need 99999 code added onto end. recommend taking look US Counties determine counties available. can also choose use:","code":"# Getting a county requires a 2 digit state fipscode + 3 digit county fipscode + 99999 hud_fmr(query = '0100199999', year = '2017') # Getting a county requires a 2 digit state fipscode + 3 digit county fipscode + 99999 hud_fmr_county_zip(county = '0100199999', year = '2017')"},{"path":"https://etam4260.github.io/rhud/articles/Fair-Market-Rents.html","id":"small-areas-fair-market-rents","dir":"Articles","previous_headings":"Examples","what":"Small Areas Fair Market Rents","title":"Fair-Market-Rents","text":"can also choose use:","code":"# Gets FMR data for METRO area. hud_fmr(query = \"METRO47900M47900\", year=c(2018)) # Getting a county requires a 2 digit state fipscode + 3 digit county fipscode + 99999 hud_fmr_metroarea_zip(metroarea = 'METRO47900M47900', year = '2017')"},{"path":"https://etam4260.github.io/rhud/articles/Fair-Market-Rents.html","id":"most-recent-fair-market-rents-files","dir":"Articles","previous_headings":"","what":"Most recent Fair Market Rents files","title":"Fair-Market-Rents","text":"get recent Fair Market Rents files year:","code":"hud_rec_fmr_yr()"},{"path":[]},{"path":"https://etam4260.github.io/rhud/articles/Fair-Market-Rents.html","id":"us-states","dir":"Articles","previous_headings":"Querying for Geographic Identifers","what":"US States","title":"Fair-Market-Rents","text":"example show query states US.","code":"# library(rhud) hud_nation_states_territories()"},{"path":"https://etam4260.github.io/rhud/articles/Fair-Market-Rents.html","id":"us-counties","dir":"Articles","previous_headings":"Querying for Geographic Identifers","what":"US Counties","title":"Fair-Market-Rents","text":"example show query counties MD, Virginia, California, respectively.","code":"hud_state_counties(\"MD\")  hud_state_counties(\"Virginia\")  hud_state_counties(\"6\")"},{"path":"https://etam4260.github.io/rhud/articles/Fair-Market-Rents.html","id":"us-metropolitan-areas","dir":"Articles","previous_headings":"Querying for Geographic Identifers","what":"US Metropolitan Areas","title":"Fair-Market-Rents","text":"example show query metropolitan areas Wyoming New York.","code":"hud_state_metropolitan(c(\"WY\", \"NY\"))"},{"path":[]},{"path":[]},{"path":"https://etam4260.github.io/rhud/articles/Fair-Market-Rents.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Fair-Market-Rents","text":"“Fair Market Rent? | RentData.org.” www.rentdata.org,        www.rentdata.org/articles/--fair-market-rent. Accessed 18 Feb. 2022. “Fair Market Rents | HUD USER.” Huduser.gov, U.S Department Housing Urban        Development, 2017, www.huduser.gov/portal/datasets/fmr.html.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Fair-Markets-Rent.html","id":"program-overview","dir":"Articles","previous_headings":"","what":"Program Overview","title":"Fair-Market-Rents","text":"According (Fair Market Rents | HUD USER), Fair Market Rents (FMRs) used calculate payment standard amounts Housing Choice Voucher program, initial renewal rents expiring project-based Section 8 contracts, initial rents housing assistance payment (HAP) contracts Moderate Rehabilitation Single Room Occupancy program (Mod Rehab), rent ceilings rental units HOME Investment Partnerships program Emergency Solution Grants program, rent ceilings rental units HOME Investment Partnerships program Emergency Solution Grant. Furthermore, United States Department Housing Urban Development (HUD) calculates FMRs metropolitan areas defined Office Management Budget (OMB), HUD-designated subdivisions OMB metropolitan areas, non-metropolitan county annual basis. FMRs must posted least 30 days go effect, must go force beginning federal fiscal year (usually October 1). Fair Market Rentals estimates 40th percentile gross rents standard quality units within metropolitan region non-metropolitan county, described 24 CFR 888.113.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Fair-Markets-Rent.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Fair-Market-Rents","text":"basic examples show query Fair Markets Rent API. looking examples RECOMMEND first looking parameters well return data located bottom page. Disclaimer: output tables large displayed choose leave . Querying county cbsa code considered small areas return data zip code level. small areas, give singular measurement entire county cbsa. Lets say working county level data – mixing together (counties small areas small areas) counties small areas NA zip_code, meaning measurement defined county level. counties small areas return zip code data zip_code field.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Fair-Markets-Rent.html","id":"state-level-fair-markets-rent","dir":"Articles","previous_headings":"Examples","what":"State Level Fair Markets Rent","title":"Fair-Market-Rents","text":"example shows query Fair Markets Rent API state. can use state abbreviation, state name, state fips code. return counties state Fair Markets Rents well metroareas state Fair Markets Rent. need county level data, might work better… need just metro data…","code":"# These functions gets FMR data for the state of Virginia in 2021. hud_fmr(query = 'VA', year = '2021')  hud_fmr(query= \"Virginia\", year = '2021')  hud_fmr(query= \"51\", year = '2021') # These functions gets FMR data for the state of Virginia in 2021 for counties. hud_fmr_state_counties(state = 'VA', year = '2021')  hud_fmr_state_counties(state = \"Virginia\", year = '2021')  hud_fmr_state_counties(state = \"51\", year = '2021') # These functions gets FMR data for the state of Virginia in 2021 for metroareas. hud_fmr_state_metroareas(state = 'VA', year = '2021')  hud_fmr_state_metroareas(state = \"Virginia\", year = '2021')  hud_fmr_state_metroareas(state = \"51\", year = '2021')"},{"path":"https://etam4260.github.io/rhud/articles/Fair-Markets-Rent.html","id":"county-level-fair-markets-rent","dir":"Articles","previous_headings":"Examples","what":"County Level Fair Markets Rent","title":"Fair-Market-Rents","text":"example shows query Fair Markets Rent county level basis. defined 2 digit state code + 3 digit county code. also need 99999 code added onto end. recommend taking look US Counties determine counties available. can also choose use:","code":"# Getting a county requires a 2 digit state fipscode + 3 digit county fipscode + 99999 hud_fmr(query = '0100199999', year = '2017') # Getting a county requires a 2 digit state fipscode + 3 digit county fipscode + 99999 hud_fmr_county_zip(county = '0100199999', year = '2017')"},{"path":"https://etam4260.github.io/rhud/articles/Fair-Markets-Rent.html","id":"small-areas-fair-markets-rent","dir":"Articles","previous_headings":"Examples","what":"Small Areas Fair Markets Rent","title":"Fair-Market-Rents","text":"can also choose use:","code":"# Gets FMR data for METRO area. hud_fmr(query = \"METRO47900M47900\", year=c(2018)) # Getting a county requires a 2 digit state fipscode + 3 digit county fipscode + 99999 hud_fmr_metroarea_zip(metroarea = 'METRO47900M47900', year = '2017')"},{"path":"https://etam4260.github.io/rhud/articles/Fair-Markets-Rent.html","id":"most-recent-fair-markets-rent-files","dir":"Articles","previous_headings":"","what":"Most recent Fair Markets Rent files","title":"Fair-Market-Rents","text":"get recent Fair Markets Rent files year:","code":"hud_rec_fmr_yr()"},{"path":[]},{"path":"https://etam4260.github.io/rhud/articles/Fair-Markets-Rent.html","id":"us-states","dir":"Articles","previous_headings":"Querying for Geographic Identifers","what":"US States","title":"Fair-Market-Rents","text":"example show query states US.","code":"# library(rhud) hud_nation_states_territories()"},{"path":"https://etam4260.github.io/rhud/articles/Fair-Markets-Rent.html","id":"us-counties","dir":"Articles","previous_headings":"Querying for Geographic Identifers","what":"US Counties","title":"Fair-Market-Rents","text":"example show query counties MD, Virginia, California, respectively.","code":"hud_state_counties(\"MD\")  hud_state_counties(\"Virginia\")  hud_state_counties(\"6\")"},{"path":"https://etam4260.github.io/rhud/articles/Fair-Markets-Rent.html","id":"us-metropolitan-areas","dir":"Articles","previous_headings":"Querying for Geographic Identifers","what":"US Metropolitan Areas","title":"Fair-Market-Rents","text":"example show query metropolitan areas Wyoming New York.","code":"hud_state_metropolitan(c(\"WY\", \"NY\"))"},{"path":[]},{"path":[]},{"path":"https://etam4260.github.io/rhud/articles/Fair-Markets-Rent.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Fair-Market-Rents","text":"“Fair Market Rent? | RentData.org.” www.rentdata.org,        www.rentdata.org/articles/--fair-market-rent. Accessed 18 Feb. 2022. “Fair Market Rents | HUD USER.” Huduser.gov, U.S Department Housing Urban        Development, 2017, www.huduser.gov/portal/datasets/fmr.html.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Income-Limits.html","id":"program-overview","dir":"Articles","previous_headings":"","what":"Program Overview","title":"Income-Limits","text":"According (Income Limits | HUD USER), HUD establishes income restrictions assisted housing programs Public Housing, Section 8 project-based, Section 8 Housing Choice Voucher, Section 202 housing elderly, Section 811 housing persons disabilities. metropolitan region, parts metropolitan areas, non-metropolitan county, HUD creates income limitations based Median Family Income estimates Fair Market Rent area criteria.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Income-Limits.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Income-Limits","text":"page contains basic examples query HUD Income Limits API. looking examples reccomend first taking look parameters well output data located bottom page. Disclaimer: output tables large displayed choose leave . Querying state return single row containing Income Limits state. Querying county return IL measurement county. Querying cbsa return measurement cbsa.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Income-Limits.html","id":"state-level-income-limits","dir":"Articles","previous_headings":"Examples","what":"State Level Income Limits","title":"Income-Limits","text":"examples show query Income Limits state level basis. can use state abbreviation, state name, state fipscode. return single row indicating income limits particular state.","code":"library(rhud) # These function calls gets income limits data for the state of Virginia in 2021. hud_il(query = 'VA', year = '2021')  hud_il(query= \"Virginia\", year = '2021')  hud_il(query= \"51\", year = '2021')  # You can also choose to query for multiple states or multiple years. hud_il(query = c('VA', 'MD'), year = c('2021', '2019'))"},{"path":"https://etam4260.github.io/rhud/articles/Income-Limits.html","id":"county-level-income-limits","dir":"Articles","previous_headings":"Examples","what":"County Level Income Limits","title":"Income-Limits","text":"examples show query Income Limits county-level basis: counties defined 2 digit state fipscode + 3 digit county fipscode. also need 99999 code added end. currently don’t know extra 99999 included found cases ’s different. recommend looking US Counties determine counties available particular states.","code":"# Getting a county requires a 2 digit state fip + 3 digit county fip + 99999 # This queries for Income Limits in 2017. hud_il(query = '0100199999', year = '2017')"},{"path":"https://etam4260.github.io/rhud/articles/Income-Limits.html","id":"small-areas-income-limits","dir":"Articles","previous_headings":"Examples","what":"Small Areas Income Limits","title":"Income-Limits","text":"examples show query Small Areas Income Limits. Small Areas defined metropolitan micropolitan areas specified using CBSA codes. Currently, know query metropolitan small areas, sure micropolitan yet. recommend looking US Metropolitan Areas determine counties available.","code":"# Gets il data for METRO area. hud_il(query = \"METRO47900M47900\", year=c(2018))"},{"path":"https://etam4260.github.io/rhud/articles/Income-Limits.html","id":"most-recent-income-limits-files","dir":"Articles","previous_headings":"","what":"Most recent Income Limits files","title":"Income-Limits","text":"get recent Income Limits files year:","code":"# rhud::hud_rec_il_yr()"},{"path":[]},{"path":"https://etam4260.github.io/rhud/articles/Income-Limits.html","id":"us-states","dir":"Articles","previous_headings":"Querying for Geographic Identifers","what":"US States","title":"Income-Limits","text":"example show query states territories US.","code":"library(rhud) hud_nation_states_territories()"},{"path":"https://etam4260.github.io/rhud/articles/Income-Limits.html","id":"us-counties","dir":"Articles","previous_headings":"Querying for Geographic Identifers","what":"US Counties","title":"Income-Limits","text":"example show query counties MD, Virginia, California, respectively.","code":"hud_state_counties(\"MD\")  hud_state_counties(\"Virginia\")  hud_state_counties(\"6\")"},{"path":"https://etam4260.github.io/rhud/articles/Income-Limits.html","id":"us-metropolitan-areas","dir":"Articles","previous_headings":"Querying for Geographic Identifers","what":"US Metropolitan Areas","title":"Income-Limits","text":"example show query metropolitan areas state.","code":"# Get all metropolitan areas in Maryland and Virginia. hud_state_metropolitan(c(\"MD\", \"VA\"))"},{"path":[]},{"path":[]},{"path":"https://etam4260.github.io/rhud/articles/Income-Limits.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Income-Limits","text":"“Income Limits | HUD USER.” Huduser.gov, 2015,         www.huduser.gov/portal/datasets/il.html.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Setup.html","id":"interactive-key-setup","dir":"Articles","previous_headings":"","what":"Interactive Key Setup","title":"Setup","text":"various method setting key. However, recommend using Sys.setenv() function.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Setup.html","id":"using-sys-setenv-during-an-interactive-session","dir":"Articles","previous_headings":"Interactive Key Setup","what":"Using Sys.setenv() during an interactive session","title":"Setup","text":"One method setting API key use environment variables. library searches HUD_KEY user environment check key defined. key defined, empty string outputted. set key… need go https://www.huduser.gov/hudapi/public/register?comingfrom=1 register key replace . can also use hud_set_key() function – quicker type intuitive. can also tell RStudio remember key setting in_wkdir in_home parameter TRUE write Sys.setenv(“-key”) .Rprofile. check whether rhud can gain access environment variable… now set rest R session.","code":"library(rhud)  Sys.getenv(\"HUD_KEY\") Sys.setenv(\"HUD_KEY\" = \"YOUR KEY HERE\") Sys.getenv(\"HUD_KEY\") hud_set_key(\"YOUR KEY HERE\", in_home = TRUE) hud_get_key()"},{"path":"https://etam4260.github.io/rhud/articles/Setup.html","id":"setting-a-user-agent","dir":"Articles","previous_headings":"","what":"Setting a user agent","title":"Setup","text":"recommended set user agent querying. tells HUD servers bit querying application user. user agent set, return empty string.","code":"hud_set_user_agent(\"This Application\") hud_get_user_agent()"},{"path":"https://etam4260.github.io/rhud/articles/Setup.html","id":"increasing-performance-with-caching","dir":"Articles","previous_headings":"","what":"Increasing Performance with Caching","title":"Setup","text":"default, rhud uses caching default. Calls HUD User API sent RStudio temporary session directory. caching directory set (located temp directory), return empty string. check current caching directory use: set new caching directory use: clear items cache use:","code":"hud_get_cache_dir() hud_set_cache_dir(\".//a//sample//path\", in_home = TRUE) hud_clear_cache()"},{"path":"https://etam4260.github.io/rhud/articles/Setup.html","id":"tibbles-vs-dataframes","dir":"Articles","previous_headings":"","what":"Tibbles vs Dataframes","title":"Setup","text":"get tibbles instead data frames, use options(rhud_use_tibble = TRUE) set explicitly using to_tibble argument.","code":"options(rhud_use_tibble = TRUE)  hud_cw_zip_tract(zip = '35213', year = c('2010'), quarter = c('1'),                  to_tibble = TRUE)"},{"path":"https://etam4260.github.io/rhud/articles/Setup.html","id":"understanding-the-syntax","dir":"Articles","previous_headings":"","what":"Understanding the Syntax","title":"Setup","text":"noticeable issue querying geographic data determining resolution data returned . Therefore, understanding syntax function calls easily help determine querying data returned. general syntax functions within package follow pattern {dataset},{geography}, {resolution} placeholders: hud_{dataset}_{geography}_{resolution} {dataset}: symbol represents dataset query . example want fair markets rent data, ‘fmr’. want data crosswalk files, ‘cw’. {geography}: symbol represents geographic resolution query . example, function requires input state(s), named ‘state.’ function requires input county(s) ‘county’. {resolution}: symbol represented output geographic resolution. example, want data zip code level, ‘zip’. {geography} {resolution}, omni functions capable performing queries {dataset}, functions harder understand. {resolution}, inherits {geography}. means {geography} state input, data described output data also state. quick example: first part function begins ‘hud’. second part ‘cw’ meaning querying crosswalk files. third part ‘county’ meaning need input county(s) fourth part ‘zip’ meaning data returned zip code resolution.","code":"hud_cw_county_zip(county = 22031, year = c('2017'), quarter = c('1'))"},{"path":"https://etam4260.github.io/rhud/articles/Setup.html","id":"additional-help","dir":"Articles","previous_headings":"","what":"Additional Help","title":"Setup","text":"ever get confused need help can easily revisit website can check function definitions Reference tab. quickly open website web browser well github repository can submit issues.","code":"rhud_website()"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"program-overview","dir":"Articles","previous_headings":"","what":"Program Overview","title":"USPS-Crosswalk","text":"According (US Department Housing Urban Development, n.d.), difficulty linking United States Postal Service (USPS) ZIP codes Census Bureau regions one many obstacles social science scholars practitioners face. ZIP code level relevant data , paired demographic data calculated various Census geographic levels, open new paths investigation. Furthermore, (US Department Housing Urban Development, n.d.) believes several appropriate approaches integrating ZIP codes Census geographies, limited. HUD-USPS Crosswalk Files supplied PD&R enable routes integrating data. one---kind files created using data quarterly USPS Vacancy Data. come straight USPS; ’re updated quarterly, ’re always date changes ZIP code configurations; reflect commercial residential addresses. many phenomena housing researchers study based housing unit address, latter attribute special interest . Analysts can take account just spatial distribution population, also spatial distribution residences, utilizing allocation approach based residential addresses rather area population. allows sophisticated approach data allocation across different geographies. journal articles describe problem proposed solution detail: Wilson, Ron Din, Alexander, 2018. “Understanding Enhancing U.S.         Department Housing Urban Development’s ZIP Code Crosswalk Files,”         Cityscape: Journal Policy Development Research, Volume 20 Number 2, 277         https://www.huduser.gov/portal/periodicals/cityscpe/vol20num2/ch16.pdf Din, Alexander Wilson, Ron, 2020. “Crosswalking ZIP Codes Census         Geographies: Geoprocessing U.S. Department Housing & Urban Development’s         ZIP Code Crosswalk Files,” Cityscape: Journal Policy Development         Research, Volume 22, Number 1,         https://www.huduser.gov/portal/periodicals/cityscpe/vol22num1/ch12.pdf","code":""},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"census-geographies","dir":"Articles","previous_headings":"","what":"Census Geographies","title":"USPS-Crosswalk","text":"chart provided US Census Bureau gives good example relationships among different geographies. crosswalk files support subset .","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"USPS-Crosswalk","text":"12 main function calls crosswalk files: package also contains omni function encapsulates capabilities main function calls – omni-function zip-tract zip-county zip-cbsa (Core Base Statistical Areas) zip-cbsadiv (Available 4th Quarter 2017 onwards) zip-cd (Congressional District) tract-zip county-zip cbsa-zip cbsadiv-zip (Available 4th Quarter 2017 onwards) cd-zip zip-countysub (Available 2nd Quarter 2018 onwards) countysub-zip (Available 2nd Quarter 2018 onwards) first geoid type function call query . example 1) , ‘zip’ first geoid ‘tract’ second geoid. second geoid function call describes geoid want determine ‘intersection’ first geoid intersection described % residential, business, , total buildings overlap. example, function call #7, might county called 22031 zip codes 71052, 71078, 71049, 71032 … residential % (res_ratio) zip 0.38, 0.21, 0.11, 0.05 … respectively. zipcodes’ res_ratios, added equal 1, signaling grouping zip codes make 100% residential address county zipcode taking respective residential percentage. Disclaimer: Although exists inverse relationships Crosswalk Files, measurements COMPLETELY inverse – reasons stated within papers . basic examples shows query Crosswalk API. looking outputted data RECOMMEND first taking look parameters well return data located bottom page.","code":""},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalk-zipcode-to-census-tract","dir":"Articles","previous_headings":"Examples","what":"Crosswalk zipcode to census tract","title":"USPS-Crosswalk","text":"","code":"library(rhud) #>  #> rhud: #> ------------------------------------------------------------------------------------------ #> * To begin, first obtain a key from HUD User website at `https://www.huduser.gov/hudapi/public/login` #> * To set the key, use hud_set_key(\"your-key\") #> * To get tibbles instead of dataframes, use `options(rhud_use_tibble = TRUE)` #> * Caching is enabled by default. To set a new cache directory use hud_set_cache_dir(). #> * To delete cached items, use hud_clear_cache() #> * Set these in your R script for single session or in .Rprofile for persistence. #> * For more information on how to use this package, visit `https://etam4260.github.io/rhud/index.html` #> ---------------------------------------------------------------------------------------- #>  #> * Setting rhud cache to R temp directory. options (digits=4)  hud_cw_zip_tract(zip = '35213', year = c('2010'), quarter = c('1')) #> Downloading: [==================================================] 100% 1/1 0 #> usps?type=1&query=35213&year=2010&quarter=1 #>  #>         tract res_ratio bus_ratio oth_ratio tot_ratio   zip year quarter #> 1 01073010801  0.338469  0.404558  0.697872  0.354414 35213 2010       1 #> 2 01073010803  0.230782  0.028490  0.008511  0.212530 35213 2010       1 #> 3 01073005600  0.185858  0.039886  0.004255  0.171949 35213 2010       1 #> 4 01073010802  0.114337  0.011396  0.000000  0.105006 35213 2010       1 #> 5 01073002306  0.061953  0.509971  0.144681  0.088122 35213 2010       1 #> 6 01073004702  0.037626  0.000000  0.144681  0.039396 35213 2010       1 #> 7 01073004800  0.018975  0.000000  0.000000  0.017328 35213 2010       1 #> 8 01073010805  0.009244  0.005698  0.000000  0.008738 35213 2010       1 #> 9 01073010804  0.002757  0.000000  0.000000  0.002518 35213 2010       1"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalk-zipcode-to-county-fip","dir":"Articles","previous_headings":"Examples","what":"Crosswalk zipcode to county fip","title":"USPS-Crosswalk","text":"","code":"hud_cw_zip_county(zip = 35213, year = c('2020'), quarter = c('2')) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=2&query=35213&year=2020&quarter=2 #>   county res_ratio bus_ratio oth_ratio tot_ratio   zip year quarter #> 1  01073         1         1         1         1 35213 2020       2"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalk-zipcode-to-core-base-statistical-area-cbsa","dir":"Articles","previous_headings":"Examples","what":"Crosswalk zipcode to core base statistical area (cbsa)","title":"USPS-Crosswalk","text":"","code":"hud_cw_zip_cbsa(zip = 35213, year = c('2011'), quarter = c('3')) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=3&query=35213&year=2011&quarter=3 #>    cbsa res_ratio bus_ratio oth_ratio tot_ratio   zip year quarter #> 1 13820         1         1         1         1 35213 2011       3"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalk-zipcode-to-core-based-statistical-area-division-cbsadiv","dir":"Articles","previous_headings":"Examples","what":"Crosswalk zipcode to core based statistical area division (cbsadiv)","title":"USPS-Crosswalk","text":"","code":"hud_cw_zip_cbsadiv(zip = '22031', year = c('2019'), quarter = c('4')) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=4&query=22031&year=2019&quarter=4 #>   cbsadiv res_ratio bus_ratio oth_ratio tot_ratio   zip year quarter #> 1   47894         1         1         1         1 22031 2019       4"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalk-zipcode-to-congressional-district-cd","dir":"Articles","previous_headings":"Examples","what":"Crosswalk zipcode to congressional district (cd)","title":"USPS-Crosswalk","text":"","code":"hud_cw_zip_cd(zip = '35213', year = c(2011), quarter = c(1)) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=5&query=35213&year=2011&quarter=1 #>     cd res_ratio bus_ratio oth_ratio tot_ratio   zip year quarter #> 1 0106  0.952728    0.9831  0.991701  0.955706 35213 2011       1 #> 2 0107  0.043711    0.0169  0.008299  0.041045 35213 2011       1 #> 3 0103  0.001781    0.0000  0.000000  0.001624 35213 2011       1 #> 4 0104  0.001781    0.0000  0.000000  0.001624 35213 2011       1"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalk-census-tract-to-zipcode","dir":"Articles","previous_headings":"Examples","what":"Crosswalk census tract to zipcode","title":"USPS-Crosswalk","text":"","code":"hud_cw_tract_zip(tract = 48201223100, year = c('2017'), quarter = c('1')) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=6&query=48201223100&year=2017&quarter=1 #>     zip res_ratio bus_ratio oth_ratio tot_ratio       tract year quarter #> 1 77032         1   0.95425         1  0.991617 48201223100 2017       1 #> 2 77396         0   0.04575         0  0.008383 48201223100 2017       1"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalk-county-fip-into-zipcode","dir":"Articles","previous_headings":"Examples","what":"Crosswalk county fip into zipcode","title":"USPS-Crosswalk","text":"","code":"hud_cw_county_zip(county = '22031', year = c('2010'), quarter = c('1')) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=7&query=22031&year=2010&quarter=1 #>      zip res_ratio bus_ratio oth_ratio tot_ratio county year quarter #> 1  71052 0.4322130  0.699634   0.56338 0.4455100  22031 2010       1 #> 2  71078 0.1816700  0.086081   0.15493 0.1770400  22031 2010       1 #> 3  71049 0.1103580  0.065934   0.15493 0.1085520  22031 2010       1 #> 4  71032 0.0813449  0.040293   0.01408 0.0790172  22031 2010       1 #> 5  71027 0.0699566  0.047619   0.04225 0.0687441  22031 2010       1 #> 6  71030 0.0435647  0.020147   0.04225 0.0424621  22031 2010       1 #> 7  71046 0.0425705  0.021978   0.01408 0.0414348  22031 2010       1 #> 8  71063 0.0275669  0.014652   0.01408 0.0268813  22031 2010       1 #> 9  71419 0.0105748  0.003663   0.00000 0.0101875  22031 2010       1 #> 10 71065 0.0001808  0.000000   0.00000 0.0001712  22031 2010       1"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalk-core-based-statistical-areas-cbsa-to-zipcode","dir":"Articles","previous_headings":"Examples","what":"Crosswalk core based statistical areas (cbsa) to zipcode","title":"USPS-Crosswalk","text":"","code":"hud_cw_cbsa_zip(cbsa = '10140', year = c('2017'), quarter = c('2')) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=8&query=10140&year=2017&quarter=2 #>      zip res_ratio bus_ratio oth_ratio tot_ratio  cbsa year quarter #> 1  98520 3.384e-01 0.5520178 0.4216084 3.573e-01 10140 2017       2 #> 2  98550 1.823e-01 0.1780822 0.2258327 1.835e-01 10140 2017       2 #> 3  98569 1.268e-01 0.0744169 0.1283509 1.230e-01 10140 2017       2 #> 4  98563 1.166e-01 0.0995927 0.1064175 1.150e-01 10140 2017       2 #> 5  98541 1.001e-01 0.0377638 0.0609261 9.411e-02 10140 2017       2 #> 6  98557 4.417e-02 0.0148093 0.0138099 4.093e-02 10140 2017       2 #> 7  98537 3.694e-02 0.0159200 0.0138099 3.457e-02 10140 2017       2 #> 8  98568 2.151e-02 0.0011107 0.0040617 1.938e-02 10140 2017       2 #> 9  98595 1.415e-02 0.0103665 0.0154346 1.391e-02 10140 2017       2 #> 10 98547 5.923e-03 0.0029619 0.0024370 5.581e-03 10140 2017       2 #> 11 98535 2.993e-03 0.0011107 0.0016247 2.805e-03 10140 2017       2 #> 12 98575 2.899e-03 0.0014809 0.0008123 2.721e-03 10140 2017       2 #> 13 98526 2.307e-03 0.0051833 0.0000000 2.444e-03 10140 2017       2 #> 14 98552 1.964e-03 0.0025916 0.0000000 1.944e-03 10140 2017       2 #> 15 98536 1.964e-03 0.0007405 0.0000000 1.805e-03 10140 2017       2 #> 16 98571 6.546e-04 0.0007405 0.0016247 6.942e-04 10140 2017       2 #> 17 98579 2.494e-04 0.0000000 0.0000000 2.221e-04 10140 2017       2 #> 18 98559 3.117e-05 0.0007405 0.0000000 8.331e-05 10140 2017       2 #> 19 98562 0.000e+00 0.0003702 0.0008123 5.554e-05 10140 2017       2 #> 20 98583 0.000e+00 0.0000000 0.0008123 2.777e-05 10140 2017       2 #> 21 98587 0.000e+00 0.0000000 0.0008123 2.777e-05 10140 2017       2 #> 22 98566 0.000e+00 0.0000000 0.0008123 2.777e-05 10140 2017       2"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalk-core-based-statistical-areas-division-cbsadiv-to-zipcode","dir":"Articles","previous_headings":"Examples","what":"Crosswalk core based statistical areas division (cbsadiv) to zipcode","title":"USPS-Crosswalk","text":"","code":"hud_cw_cbsadiv_zip(cbsadiv = 10380, year = c('2017'), quarter = c('4')) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=9&query=10380&year=2017&quarter=4 #>      zip res_ratio bus_ratio oth_ratio tot_ratio cbsadiv year quarter #> 1  00662 0.1640649  0.185800  0.147385 1.652e-01   10380 2017       4 #> 2  00603 0.1564245  0.142274  0.407290 1.582e-01   10380 2017       4 #> 3  00685 0.1352663  0.138602  0.076070 1.349e-01   10380 2017       4 #> 4  00602 0.1003411  0.102149  0.061807 1.000e-01   10380 2017       4 #> 5  00610 0.0840450  0.075490  0.037242 8.304e-02   10380 2017       4 #> 6  00641 0.0810440  0.090996  0.081616 8.166e-02   10380 2017       4 #> 7  00676 0.0817030  0.066785  0.045959 8.042e-02   10380 2017       4 #> 8  00669 0.0679181  0.054815  0.025357 6.668e-02   10380 2017       4 #> 9  00677 0.0574370  0.055359  0.102219 5.778e-02   10380 2017       4 #> 10 00605 0.0337231  0.048014  0.001585 3.426e-02   10380 2017       4 #> 11 00690 0.0264032  0.018906  0.007132 2.575e-02   10380 2017       4 #> 12 00604 0.0057615  0.017546  0.001585 6.434e-03   10380 2017       4 #> 13 00611 0.0056725  0.003128  0.001585 5.475e-03   10380 2017       4 #> 14 00612 0.0001959  0.000136  0.001585 2.068e-04   10380 2017       4 #> 15 00631 0.0000000  0.000000  0.001585 1.654e-05   10380 2017       4"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalk-congressional-district-cd-to-zipcode","dir":"Articles","previous_headings":"Examples","what":"Crosswalk congressional district (cd) to zipcode","title":"USPS-Crosswalk","text":"","code":"hud_cw_cd_zip(cd = '2202', year = c('2010'), quarter = c('4')) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=10&query=2202&year=2010&quarter=4 #>      zip res_ratio bus_ratio oth_ratio tot_ratio   cd year quarter #> 1  70072 0.0873171 6.011e-02 0.0383332 8.356e-02 2202 2010       4 #> 2  70115 0.0700244 6.151e-02 0.0831270 6.984e-02 2202 2010       4 #> 3  70119 0.0689893 7.905e-02 0.0521159 6.916e-02 2202 2010       4 #> 4  70058 0.0621786 5.956e-02 0.1148918 6.382e-02 2202 2010       4 #> 5  70094 0.0559088 2.953e-02 0.0506084 5.374e-02 2202 2010       4 #> 6  70117 0.0563989 3.658e-02 0.0189512 5.360e-02 2202 2010       4 #> 7  70122 0.0560060 2.443e-02 0.0243351 5.252e-02 2202 2010       4 #> 8  70130 0.0438001 1.326e-01 0.1001400 5.245e-02 2202 2010       4 #> 9  70114 0.0511557 3.982e-02 0.0505007 5.028e-02 2202 2010       4 #> 10 70118 0.0520726 2.443e-02 0.0325186 4.931e-02 2202 2010       4 #> 11 70131 0.0484644 1.244e-02 0.0328416 4.521e-02 2202 2010       4 #> 12 70126 0.0421946 2.998e-02 0.0360719 4.106e-02 2202 2010       4 #> 13 70127 0.0378133 2.358e-02 0.0369333 3.671e-02 2202 2010       4 #> 14 70056 0.0353248 2.828e-02 0.0390869 3.493e-02 2202 2010       4 #> 15 70116 0.0319406 4.517e-02 0.0675137 3.418e-02 2202 2010       4 #> 16 70065 0.0333898 1.114e-02 0.0648218 3.281e-02 2202 2010       4 #> 17 70062 0.0249526 8.814e-02 0.0412404 3.028e-02 2202 2010       4 #> 18 70125 0.0298282 2.718e-02 0.0187359 2.924e-02 2202 2010       4 #> 19 70128 0.0290761 5.197e-03 0.0043071 2.641e-02 2202 2010       4 #> 20 70113 0.0189405 3.168e-02 0.0330570 2.039e-02 2202 2010       4 #> 21 70053 0.0186194 4.232e-02 0.0179821 2.038e-02 2202 2010       4 #> 22 70112 0.0134058 5.072e-02 0.0194896 1.643e-02 2202 2010       4 #> 23 70129 0.0139466 1.404e-02 0.0059223 1.367e-02 2202 2010       4 #> 24 70003 0.0064473 1.054e-02 0.0052762 6.715e-03 2202 2010       4 #> 25 70121 0.0040264 6.396e-03 0.0055992 4.260e-03 2202 2010       4 #> 26 70124 0.0045376 1.049e-03 0.0015075 4.169e-03 2202 2010       4 #> 27 70123 0.0016308 7.995e-04 0.0023689 1.594e-03 2202 2010       4 #> 28 70001 0.0004352 8.944e-03 0.0007537 1.087e-03 2202 2010       4 #> 29 70067 0.0011745 3.498e-04 0.0000000 1.071e-03 2202 2010       4 #> 30 70170 0.0000000 5.496e-03 0.0003230 4.248e-04 2202 2010       4 #> 31 70163 0.0000000 4.597e-03 0.0002154 3.534e-04 2202 2010       4 #> 32 70139 0.0000000 3.698e-03 0.0002154 2.857e-04 2202 2010       4 #> 33 70146 0.0000000 4.997e-04 0.0002154 4.511e-05 2202 2010       4 #> 34 70143 0.0000000 4.997e-05 0.0000000 3.760e-06 2202 2010       4 #> 35 70165 0.0000000 4.997e-05 0.0000000 3.760e-06 2202 2010       4 #> 36 70141 0.0000000 4.997e-05 0.0000000 3.760e-06 2202 2010       4"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalk-zipcode-to-county-subdivision-countysub","dir":"Articles","previous_headings":"Examples","what":"Crosswalk zipcode to county subdivision (countysub)","title":"USPS-Crosswalk","text":"","code":"hud_cw_zip_countysub(zip = '35213', year = c('2019'), quarter = c('2')) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=11&query=35213&year=2019&quarter=2 #>    countysub res_ratio bus_ratio oth_ratio tot_ratio   zip year quarter #> 1 0107390324         1         1         1         1 35213 2019       2"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalk-county-subdivision-countysub-to-zipcode","dir":"Articles","previous_headings":"Examples","what":"Crosswalk county subdivision (countysub) to zipcode","title":"USPS-Crosswalk","text":"","code":"hud_cw_countysub_zip(countysub = '4606720300 ', year = c('2019', '2019', '2019'),                      quarter = c('4','4')) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=12&query=4606720300&year=2019&quarter=4 #>     zip res_ratio bus_ratio oth_ratio tot_ratio  countysub year quarter #> 1 57376         1         1         0         1 4606720300 2019       4"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"querying-for-only-the-crosswalked-geoids","dir":"Articles","previous_headings":"","what":"Querying for only the crosswalked geoids","title":"USPS-Crosswalk","text":"just want crosswalked geoids, can set minimal argument TRUE. return vector containing crosswalked geoids without extra metadata.","code":"hud_cw_county_zip(county = '22031', year = c('2010'), quarter = c('1'), minimal = TRUE) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=7&query=22031&year=2010&quarter=1 #>  [1] \"71052\" \"71078\" \"71049\" \"71032\" \"71027\" \"71030\" \"71046\" \"71063\" \"71419\" #> [10] \"71065\""},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"using-the-omni-function-for-querying","dir":"Articles","previous_headings":"","what":"Using the omni function for querying","title":"USPS-Crosswalk","text":"omni function redundant implementation functions shown requires specifying type can 1-12. type argument follows number scheme described within [input arguments][Input Arguments]. also must use ‘query’ argument (.e query = 22031) inputting geoids instead specific geoid names (.e county = 22031, cd = 7200) used functions.","code":"hud_cw(type = 7, query = '22031', year = c('2010'), quarter = c('1')) #>  Downloading:    [==================================================]    100%    1/1 0   usps?type=7&query=22031&year=2010&quarter=1 #>      zip res_ratio bus_ratio oth_ratio tot_ratio county year quarter #> 1  71052 0.4322130  0.699634   0.56338 0.4455100  22031 2010       1 #> 2  71078 0.1816700  0.086081   0.15493 0.1770400  22031 2010       1 #> 3  71049 0.1103580  0.065934   0.15493 0.1085520  22031 2010       1 #> 4  71032 0.0813449  0.040293   0.01408 0.0790172  22031 2010       1 #> 5  71027 0.0699566  0.047619   0.04225 0.0687441  22031 2010       1 #> 6  71030 0.0435647  0.020147   0.04225 0.0424621  22031 2010       1 #> 7  71046 0.0425705  0.021978   0.01408 0.0414348  22031 2010       1 #> 8  71063 0.0275669  0.014652   0.01408 0.0268813  22031 2010       1 #> 9  71419 0.0105748  0.003663   0.00000 0.0101875  22031 2010       1 #> 10 71065 0.0001808  0.000000   0.00000 0.0001712  22031 2010       1"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"crosswalking-a-dataset","dir":"Articles","previous_headings":"","what":"Crosswalking a dataset","title":"USPS-Crosswalk","text":"need apply allocation method (residential, business, , total) individual items data set, crosswalk() function available. Lets say wanted know population zip code level (likely already data set ) counties Washington, Wicomico, Worchester Maryland year 2019. NOTE: use crosswalk() function likely best suited datasets described geographic identifier want crosswalk . case population might best example . crosswalked data set zip code associated county assigned population value.  utilize allocation method provided crosswalk files apply columns data set, specify method cw_geoid_col arguments. case want allocate county population levels zip code level using method based ratio residential addresses.","code":"sample <- data.frame(pop = c(151049, 103609, 52276),                      county = c(\"24043\", \"24045\", \"24047\"))  head(sample) #>      pop county #> 1 151049  24043 #> 2 103609  24045 #> 3  52276  24047 crosswalk(data = sample, geoid = \"county\", geoid_col = \"county\",            cw_geoid = \"zip\", cw_geoid_col = NA, method = NA, year = 2019           , quarter = 1) #>  Downloading:    [=================---------------------------------]    33% 1/3 0   usps?type=7&query=24043&year=2019&quarter=1 Downloading:    [=================================-----------------]    67% 2/3 0   usps?type=7&query=24045&year=2019&quarter=1 Downloading:    [==================================================]    100%    3/3 0   usps?type=7&query=24047&year=2019&quarter=1 #>  #>  #> * No method or cw_geoid_col specified: will just merge the datasets. #>    county   zip res_ratio bus_ratio oth_ratio tot_ratio year quarter    pop #> 1   24043 21740 4.154e-01 0.5855329 0.6520012 4.388e-01 2019       1 151049 #> 2   24043 21742 2.269e-01 0.2051453 0.2022609 2.242e-01 2019       1 151049 #> 3   24043 21795 7.331e-02 0.0689943 0.0498014 7.197e-02 2019       1 151049 #> 4   24043 21713 5.965e-02 0.0295690 0.0192484 5.558e-02 2019       1 151049 #> 5   24043 21783 4.411e-02 0.0126963 0.0033608 3.993e-02 2019       1 151049 #> 6   24043 21722 3.437e-02 0.0075175 0.0030553 3.094e-02 2019       1 151049 #> 7   24043 21750 2.974e-02 0.0414300 0.0262756 3.051e-02 2019       1 151049 #> 8   24043 21782 2.497e-02 0.0046776 0.0009166 2.237e-02 2019       1 151049 #> 9   24043 21756 2.179e-02 0.0018376 0.0009166 1.934e-02 2019       1 151049 #> 10  24043 21767 1.567e-02 0.0145339 0.0137489 1.550e-02 2019       1 151049 #> 11  24043 21719 1.093e-02 0.0030070 0.0265811 1.098e-02 2019       1 151049 #> 12  24043 21734 1.081e-02 0.0150351 0.0012221 1.073e-02 2019       1 151049 #> 13  24043 21758 1.118e-02 0.0030070 0.0006111 1.010e-02 2019       1 151049 #> 14  24043 21733 6.992e-03 0.0021717 0.0000000 6.318e-03 2019       1 151049 #> 15  24043 21711 6.903e-03 0.0015035 0.0000000 6.187e-03 2019       1 151049 #> 16  24043 21779 5.866e-03 0.0016706 0.0000000 5.289e-03 2019       1 151049 #> 17  24043 21715 5.481e-04 0.0001671 0.0000000 4.950e-04 2019       1 151049 #> 18  24043 21780 4.740e-04 0.0000000 0.0000000 4.168e-04 2019       1 151049 #> 19  24043 21769 2.370e-04 0.0003341 0.0000000 2.345e-04 2019       1 151049 #> 20  24043 21720 2.963e-05 0.0001671 0.0000000 3.908e-05 2019       1 151049 #> 21  24043 21746 0.000e+00 0.0005012 0.0000000 3.908e-05 2019       1 151049 #> 22  24043 21755 1.481e-05 0.0000000 0.0000000 1.303e-05 2019       1 151049 #> 23  24043 21781 0.000e+00 0.0001671 0.0000000 1.303e-05 2019       1 151049 #> 24  24043 21721 0.000e+00 0.0001671 0.0000000 1.303e-05 2019       1 151049 #> 25  24043 21741 0.000e+00 0.0001671 0.0000000 1.303e-05 2019       1 151049 #> 26  24045 21804 3.617e-01 0.2666006 0.4497751 3.574e-01 2019       1 103609 #> 27  24045 21801 2.563e-01 0.4428147 0.4677661 2.830e-01 2019       1 103609 #> 28  24045 21826 6.512e-02 0.0471754 0.0228636 6.152e-02 2019       1 103609 #> 29  24045 21875 6.282e-02 0.0243806 0.0356072 5.809e-02 2019       1 103609 #> 30  24045 21802 4.247e-02 0.1117939 0.0007496 4.670e-02 2019       1 103609 #> 31  24045 21830 3.543e-02 0.0059465 0.0018741 3.121e-02 2019       1 103609 #> 32  24045 21849 3.141e-02 0.0053518 0.0052474 2.784e-02 2019       1 103609 #> 33  24045 21850 2.981e-02 0.0114965 0.0089955 2.719e-02 2019       1 103609 #> 34  24045 21837 2.548e-02 0.0105055 0.0026237 2.306e-02 2019       1 103609 #> 35  24045 21874 2.180e-02 0.0073340 0.0022489 1.958e-02 2019       1 103609 #> 36  24045 21803 1.634e-02 0.0537166 0.0003748 1.893e-02 2019       1 103609 #> 37  24045 21822 1.714e-02 0.0043608 0.0007496 1.522e-02 2019       1 103609 #> 38  24045 21856 9.956e-03 0.0033697 0.0000000 8.897e-03 2019       1 103609 #> 39  24045 21861 8.827e-03 0.0001982 0.0011244 7.692e-03 2019       1 103609 #> 40  24045 21865 5.789e-03 0.0025768 0.0000000 5.228e-03 2019       1 103609 #> 41  24045 21840 5.112e-03 0.0011893 0.0000000 4.519e-03 2019       1 103609 #> 42  24045 21814 4.434e-03 0.0005946 0.0000000 3.881e-03 2019       1 103609 #> 43  24045 21852 0.000e+00 0.0003964 0.0000000 3.545e-05 2019       1 103609 #> 44  24045 21810 0.000e+00 0.0001982 0.0000000 1.772e-05 2019       1 103609 #> 45  24047 21842 5.302e-01 0.4559211 0.8379953 5.443e-01 2019       1  52276 #> 46  24047 21811 2.832e-01 0.2535088 0.0927739 2.696e-01 2019       1  52276 #> 47  24047 21851 5.434e-02 0.0881579 0.0417249 5.577e-02 2019       1  52276 #> 48  24047 21843 4.340e-02 0.1065789 0.0009324 4.491e-02 2019       1  52276 #> 49  24047 21863 3.859e-02 0.0660088 0.0205128 3.927e-02 2019       1  52276 #> 50  24047 21813 2.390e-02 0.0160088 0.0048951 2.221e-02 2019       1  52276 #> 51  24047 21841 7.577e-03 0.0041667 0.0004662 6.918e-03 2019       1  52276 #> 52  24047 21872 6.003e-03 0.0039474 0.0004662 5.528e-03 2019       1  52276 #> 53  24047 21864 4.920e-03 0.0017544 0.0000000 4.411e-03 2019       1  52276 #> 54  24047 21829 3.411e-03 0.0008772 0.0000000 3.036e-03 2019       1  52276 #> 55  24047 21804 1.804e-03 0.0004386 0.0000000 1.604e-03 2019       1  52276 #> 56  24047 21862 1.263e-03 0.0024123 0.0002331 1.275e-03 2019       1  52276 #> 57  24047 21822 1.361e-03 0.0000000 0.0000000 1.189e-03 2019       1  52276 #> 58  24047 21792 0.000e+00 0.0002193 0.0000000 1.432e-05 2019       1  52276 crosswalk(data = sample, geoid = \"county\", geoid_col = \"county\",            cw_geoid = \"zip\", cw_geoid_col = \"pop\", method = \"res\", year = 2019           , quarter = 1) #>  Downloading:    [=================---------------------------------]    33% 1/3 0   usps?type=7&query=24043&year=2019&quarter=1 Downloading:    [=================================-----------------]    67% 2/3 0   usps?type=7&query=24045&year=2019&quarter=1 Downloading:    [==================================================]    100%    3/3 0   usps?type=7&query=24047&year=2019&quarter=1 #>  #>  #> * Applying allocation method based onresidential address percentage. #>    county   zip res_ratio bus_ratio oth_ratio tot_ratio year quarter       pop #> 1   24043 21740 4.154e-01 0.5855329 0.6520012 4.388e-01 2019       1 62751.933 #> 2   24043 21742 2.269e-01 0.2051453 0.2022609 2.242e-01 2019       1 34280.196 #> 3   24043 21795 7.331e-02 0.0689943 0.0498014 7.197e-02 2019       1 11073.212 #> 4   24043 21713 5.965e-02 0.0295690 0.0192484 5.558e-02 2019       1  9010.270 #> 5   24043 21783 4.411e-02 0.0126963 0.0033608 3.993e-02 2019       1  6663.170 #> 6   24043 21722 3.437e-02 0.0075175 0.0030553 3.094e-02 2019       1  5190.918 #> 7   24043 21750 2.974e-02 0.0414300 0.0262756 3.051e-02 2019       1  4492.829 #> 8   24043 21782 2.497e-02 0.0046776 0.0009166 2.237e-02 2019       1  3772.365 #> 9   24043 21756 2.179e-02 0.0018376 0.0009166 1.934e-02 2019       1  3291.310 #> 10  24043 21767 1.567e-02 0.0145339 0.0137489 1.550e-02 2019       1  2367.238 #> 11  24043 21719 1.093e-02 0.0030070 0.0265811 1.098e-02 2019       1  1651.249 #> 12  24043 21734 1.081e-02 0.0150351 0.0012221 1.073e-02 2019       1  1633.349 #> 13  24043 21758 1.118e-02 0.0030070 0.0006111 1.010e-02 2019       1  1689.286 #> 14  24043 21733 6.992e-03 0.0021717 0.0000000 6.318e-03 2019       1  1056.083 #> 15  24043 21711 6.903e-03 0.0015035 0.0000000 6.187e-03 2019       1  1042.659 #> 16  24043 21779 5.866e-03 0.0016706 0.0000000 5.289e-03 2019       1   886.036 #> 17  24043 21715 5.481e-04 0.0001671 0.0000000 4.950e-04 2019       1    82.786 #> 18  24043 21780 4.740e-04 0.0000000 0.0000000 4.168e-04 2019       1    71.599 #> 19  24043 21769 2.370e-04 0.0003341 0.0000000 2.345e-04 2019       1    35.799 #> 20  24043 21720 2.963e-05 0.0001671 0.0000000 3.908e-05 2019       1     4.475 #> 21  24043 21746 0.000e+00 0.0005012 0.0000000 3.908e-05 2019       1     0.000 #> 22  24043 21755 1.481e-05 0.0000000 0.0000000 1.303e-05 2019       1     2.237 #> 23  24043 21781 0.000e+00 0.0001671 0.0000000 1.303e-05 2019       1     0.000 #> 24  24043 21721 0.000e+00 0.0001671 0.0000000 1.303e-05 2019       1     0.000 #> 25  24043 21741 0.000e+00 0.0001671 0.0000000 1.303e-05 2019       1     0.000 #> 26  24045 21804 3.617e-01 0.2666006 0.4497751 3.574e-01 2019       1 37479.352 #> 27  24045 21801 2.563e-01 0.4428147 0.4677661 2.830e-01 2019       1 26557.357 #> 28  24045 21826 6.512e-02 0.0471754 0.0228636 6.152e-02 2019       1  6746.751 #> 29  24045 21875 6.282e-02 0.0243806 0.0356072 5.809e-02 2019       1  6508.531 #> 30  24045 21802 4.247e-02 0.1117939 0.0007496 4.670e-02 2019       1  4400.703 #> 31  24045 21830 3.543e-02 0.0059465 0.0018741 3.121e-02 2019       1  3671.152 #> 32  24045 21849 3.141e-02 0.0053518 0.0052474 2.784e-02 2019       1  3254.265 #> 33  24045 21850 2.981e-02 0.0114965 0.0089955 2.719e-02 2019       1  3088.362 #> 34  24045 21837 2.548e-02 0.0105055 0.0026237 2.306e-02 2019       1  2639.571 #> 35  24045 21874 2.180e-02 0.0073340 0.0022489 1.958e-02 2019       1  2258.843 #> 36  24045 21803 1.634e-02 0.0537166 0.0003748 1.893e-02 2019       1  1693.069 #> 37  24045 21822 1.714e-02 0.0043608 0.0007496 1.522e-02 2019       1  1776.021 #> 38  24045 21856 9.956e-03 0.0033697 0.0000000 8.897e-03 2019       1  1031.581 #> 39  24045 21861 8.827e-03 0.0001982 0.0011244 7.692e-03 2019       1   914.597 #> 40  24045 21865 5.789e-03 0.0025768 0.0000000 5.228e-03 2019       1   599.806 #> 41  24045 21840 5.112e-03 0.0011893 0.0000000 4.519e-03 2019       1   529.616 #> 42  24045 21814 4.434e-03 0.0005946 0.0000000 3.881e-03 2019       1   459.426 #> 43  24045 21852 0.000e+00 0.0003964 0.0000000 3.545e-05 2019       1     0.000 #> 44  24045 21810 0.000e+00 0.0001982 0.0000000 1.772e-05 2019       1     0.000 #> 45  24047 21842 5.302e-01 0.4559211 0.8379953 5.443e-01 2019       1 27719.003 #> 46  24047 21811 2.832e-01 0.2535088 0.0927739 2.696e-01 2019       1 14804.331 #> 47  24047 21851 5.434e-02 0.0881579 0.0417249 5.577e-02 2019       1  2840.491 #> 48  24047 21843 4.340e-02 0.1065789 0.0009324 4.491e-02 2019       1  2268.620 #> 49  24047 21863 3.859e-02 0.0660088 0.0205128 3.927e-02 2019       1  2017.408 #> 50  24047 21813 2.390e-02 0.0160088 0.0048951 2.221e-02 2019       1  1249.199 #> 51  24047 21841 7.577e-03 0.0041667 0.0004662 6.918e-03 2019       1   396.108 #> 52  24047 21872 6.003e-03 0.0039474 0.0004662 5.528e-03 2019       1   313.800 #> 53  24047 21864 4.920e-03 0.0017544 0.0000000 4.411e-03 2019       1   257.213 #> 54  24047 21829 3.411e-03 0.0008772 0.0000000 3.036e-03 2019       1   178.334 #> 55  24047 21804 1.804e-03 0.0004386 0.0000000 1.604e-03 2019       1    94.311 #> 56  24047 21862 1.263e-03 0.0024123 0.0002331 1.275e-03 2019       1    66.018 #> 57  24047 21822 1.361e-03 0.0000000 0.0000000 1.189e-03 2019       1    71.162 #> 58  24047 21792 0.000e+00 0.0002193 0.0000000 1.432e-05 2019       1     0.000"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"geo-in-geo-functions-does-one-geography-overlap-another","dir":"Articles","previous_headings":"","what":"Geo-in-geo functions: does one geography overlap another?","title":"USPS-Crosswalk","text":"library also allows user determine one geography overlaps another. Disclaimer: Overlap determined whether boundaries intersect, rather addresses lie . function queries zipcode 71052 overlaps cbsa 43340. infix operator used defaults recent crosswalk files available. Furthermore, must HUD_KEY system environment variable set using : check Setup page. non infix version also available: allows specify year, quarter, key arguments.","code":"# 71052 %z_in_cbsa% 43340 # z_in_cbsa(zip = 71052, cbsa = 43340, year = 2019, quarter = 2)"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"most-recent-usps-crosswalk-files","dir":"Articles","previous_headings":"","what":"Most recent USPS Crosswalk files","title":"USPS-Crosswalk","text":"get recent crosswalk files year quarter:","code":"# hud_rec_cw_yr()"},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"parameters","dir":"Articles","previous_headings":"","what":"Parameters","title":"USPS-Crosswalk","text":"query argument name first geoid function call. example, zip-county ‘zip’ argument name query. Functions #1-5 #11 must specify 5 digit zip code zip function argument.  * zip = 22031 Function #6 must specify 11 digit number consisting state FIPS + county FIPS + tract code tract tract function argument.  * tract = 51059461700 Function #7 must specify 5 digit county fips code county function argument.  * county = 51600 Function #8 must specify micropolitan metropolitan CBSA code cbsa function argument.  * cbsa = 10380 Function #9 must specify metropolitan CBSA division code cbsadiv function argument.  * cbsadiv = 35614 recommend typing hud_metropolitan(“MD”) see list metropolitan CBSA Maryland. example, code METRO22900N40079 needs 22900 inside input argument.  Function #10 must 2 digit state fips code + 2 digit congressional district code cd function argument.  * cd = 7200 Function #12 must 10 digit number consisting 5 digit county fips code + 5 digit county sub district code countysub argument.  * countysub = 4606720300","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/articles/USPS-Crosswalk.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"USPS-Crosswalk","text":"Din, Alexander Wilson, Ron, 2020. “Crosswalking ZIP Codes Census       Geographies: Geoprocessing U.S. Department Housing & Urban Development’s       ZIP Code Crosswalk Files,” Cityscape: Journal Policy Development       Research, Volume 22, Number 1, https://www.huduser.gov/portal/periodicals/cityscpe/vol22num1/ch12.pdf Katy Rossiter, K. R. (2014, July 31). Standard Hierarchy Census Bereau       Geographies [Photograph]. Understanding Geographic Relationships: Counties,       Places, Tracts .       https://www.census.gov/newsroom/blogs/random-samplings/2014/07/understanding-geographic-relation       ships-counties-places-tracts--.html U.S Department Housing Urban Development. (n.d.). HUD USPS ZIP       Code Crosswalk Files | HUD USER. HUD USPS ZIP CODE CROSSWALK FILES.       Retrieved February 17, 2022,       https://www.huduser.gov/portal/datasets/usps_crosswalk.html Wilson, Ron Din, Alexander, 2018. “Understanding Enhancing U.S.       Department Housing Urban Development’s ZIP Code Crosswalk Files,”       Cityscape: Journal Policy Development Research, Volume 20 Number 2, 277       – 294.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL-2.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Visualizing-FMR-and-IL-2","text":"US Department Housing Urban Development maintains FMR (Fair Markets Rent) IL (Income Limits) programs crucial determining eligibility assistance dollars US. Provided example querying FMR IL well mapping using leaflet R library.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL-2.html","id":"loading-in-the-necessary-libraries","dir":"Articles","previous_headings":"","what":"Loading in the necessary libraries","title":"Visualizing-FMR-and-IL-2","text":"improve performance, use tigris caching.","code":"library(rhud) library(tigris) library(leaflet) library(tidyverse) library(sf) options(tigris_use_cache = TRUE)"},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL-2.html","id":"reading-in-data","dir":"Articles","previous_headings":"","what":"Reading in data","title":"Visualizing-FMR-and-IL-2","text":"Read Fair Markets Rent counties year 2021 well shape files needed map.  Get county data state Maryland using rhud package.  Query every county Maryland get Income Limits data using rhud package.  Download shape files counties US.  Filter counties Maryland.","code":"md_counties_2021_fmr = hud_fmr_state_counties(state = 'MD', year = '2021') md_counties = hud_state_counties(\"MD\") md_counties_2021_il = hud_il(md_counties$fips_code) md_county_shapefile = tigris::counties(state = NULL, cb = FALSE,                                        resolution = \"500k\", year = 2021) md_county_shapefile = md_county_shapefile[md_county_shapefile$STATEFP == 24, ]  md_county_shapefile$fullFips = paste0(as.character(md_county_shapefile$STATEFP),                                  as.character(md_county_shapefile$COUNTYFP),                                  \"99999\")"},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL-2.html","id":"merging-of-shapefiles-and-data","dir":"Articles","previous_headings":"","what":"Merging of shapefiles and data","title":"Visualizing-FMR-and-IL-2","text":"Merge shape file FMR IL data.","code":"md_county_fmr_merged = tigris::geo_join(md_county_shapefile,                                         md_counties_2021_fmr,                                         by_sp = \"fullFips\",                                         by_df = \"fips_code\",                                         how = \"inner\")"},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL-2.html","id":"leaflet-mapping","dir":"Articles","previous_headings":"","what":"Leaflet mapping","title":"Visualizing-FMR-and-IL-2","text":"Create pallete coloring overlayed shape file. scale used corresponds Efficiency data.  Create county level, efficiency, one bedroom, two bedroom, three bedroom four bedroom label appear hovering using FMR overlay.  Create … label appear hovering using IL overlay  Using leaflet package, plot county level map Fair Markets Rents Income Limits state Maryland.","code":"pal <- colorNumeric(   palette = \"Greens\",   domain = as.numeric(md_county_fmr_merged$Efficiency)) label <- paste0(   \"County: \", md_county_fmr_merged$NAME, \"<br/>\",   \"Efficiency: \", scales::dollar(as.numeric(md_county_fmr_merged$Efficiency)), \"<br/>\",   \"One Bedroom: \", scales::dollar(as.numeric(md_county_fmr_merged$`One-Bedroom`)), \"<br/>\",   \"Two Bedroom: \", scales::dollar(as.numeric(md_county_fmr_merged$`Two-Bedroom`)), \"<br/>\",   \"Three Bedroom: \", scales::dollar(as.numeric(md_county_fmr_merged$`Three-Bedroom`)), \"<br/>\",   \"Four Bedroom: \", scales::dollar(as.numeric(md_county_fmr_merged$`Four-Bedroom`))) %>%    lapply(htmltools::HTML) md_county_fmr_merged %>%    leaflet %>%    # add base map   addProviderTiles(\"CartoDB\") %>%    addPolygons(fillColor = ~pal(as.numeric(Efficiency)),               weight = 2,               opacity = 1,               color = \"white\",               dashArray = \"3\",               fillOpacity = 0.7,               highlight = highlightOptions(weight = 2,                                            color = \"#666\",                                            dashArray = \"\",                                            fillOpacity = 0.7,                                            bringToFront = TRUE),               label = label) %>%    # add legend   addLegend(pal = pal,              values = ~as.numeric(Efficiency),              opacity = 0.7,              title = htmltools::HTML(\"Fair Markets Rent <br>                                      by County\"),             position = \"bottomright\")"},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL-2.html","id":"observations","dir":"Articles","previous_headings":"","what":"Observations","title":"Visualizing-FMR-and-IL-2","text":"noticable observations …","code":""},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Visualizing-FMR-and-IL","text":"US Department Housing Urban Development maintains Fair Market Rents (FMR) Income Limits (IL) programs crucial determining eligibility assistance dollars US. Provided example querying FMR IL well mapping using leaflet R library.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL.html","id":"loading-in-the-necessary-libraries","dir":"Articles","previous_headings":"Overview","what":"Loading in the necessary libraries","title":"Visualizing-FMR-and-IL","text":"improve performance, use tigris caching.","code":"library(rhud) library(tigris) library(leaflet) library(tidyverse) library(sf) options(tigris_use_cache = TRUE)"},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL.html","id":"reading-in-data","dir":"Articles","previous_headings":"Overview","what":"Reading in data","title":"Visualizing-FMR-and-IL","text":"Read Fair Markets Rent counties year 2021 well shape files needed map. Get county data state Maryland. Query every county get Income Limits data using rhud package. Download shape files counties US obtain consistent projection. Filter counties Maryland.","code":"md_counties_2021_fmr <- hud_fmr_state_counties(state = 'MD', year = '2021') md_counties <- hud_state_counties(\"MD\") md_counties_2021_il <- hud_il(md_counties$fips_code)  #Find unique column names and keep only unique column names unique_names <- unique(colnames(md_counties_2021_il)) md_counties_2021_il_unique <- md_counties_2021_il[unique_names] county_shapefile <- tigris::counties(state = NULL, cb = FALSE,                     resolution = \"500k\", year = 2021) %>%                      sf::st_transform('+proj=longlat +datum=WGS84') md_county_shapefile <- county_shapefile[county_shapefile$STATEFP == 24, ]  md_county_shapefile$fullFips <- paste0(as.character(md_county_shapefile$STATEFP),                                  as.character(md_county_shapefile$COUNTYFP),                                  \"99999\")"},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL.html","id":"merging-of-shapefiles-and-data","dir":"Articles","previous_headings":"Overview","what":"Merging of shapefiles and data","title":"Visualizing-FMR-and-IL","text":"Merge shape file FMR IL data.","code":"md_county_fmr_merged <- tigris::geo_join(md_county_shapefile,                                         md_counties_2021_fmr,                                         by_sp = \"fullFips\",                                         by_df = \"fips_code\",                                         how = \"inner\") md_county_il_merged <- tigris::geo_join(md_county_shapefile,                                        md_counties_2021_il_unique,                                        by_sp = \"fullFips\",                                        by_df = \"query\",                                        how = \"inner\")"},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL.html","id":"leaflet-mapping","dir":"Articles","previous_headings":"","what":"Leaflet Mapping","title":"Visualizing-FMR-and-IL","text":"Create pallete coloring overlayed shape file. scale used corresponds Efficiency data Median Income data. Create county level, efficiency, one bedroom, two bedroom, three bedroom four bedroom label appear hovering using FMR overlay. Create county level, median income, 1 person family low/low/extremely low income limits label appear hovering using IL overlay Create county level, median income, 2 person family low/low/extremely low income limits label appear hovering using IL overlay Create county level, median income, 3 person family low/low/extremely low income limits label appear hovering using IL overlay Create county level, median income, 4 person family low/low/extremely low income limits label appear hovering using IL overlay Create county level, median income, 5 person family low/low/extremely low income limits label appear hovering using IL overlay Using leaflet package, plot county level map Fair Markets Rents Income Limits state Maryland.","code":"pal_md_fmr <- colorNumeric(   palette = \"Greens\",   domain = as.numeric(md_county_fmr_merged$Efficiency)) pal_md_il <- colorNumeric(   palette = \"Purples\",   domain = as.numeric(md_county_il_merged$median_income)) label_fmr <- paste0(   \"County: \", md_county_fmr_merged$NAME, \"<br/>\",   \"Efficiency: \", scales::dollar(as.numeric(md_county_fmr_merged$Efficiency)), \"<br/>\",   \"One Bedroom: \", scales::dollar(as.numeric(md_county_fmr_merged$`One-Bedroom`)), \"<br/>\",   \"Two Bedroom: \", scales::dollar(as.numeric(md_county_fmr_merged$`Two-Bedroom`)), \"<br/>\",   \"Three Bedroom: \", scales::dollar(as.numeric(md_county_fmr_merged$`Three-Bedroom`)), \"<br/>\",   \"Four Bedroom: \", scales::dollar(as.numeric(md_county_fmr_merged$`Four-Bedroom`))) %>%    lapply(htmltools::HTML) label_il_p1 <- paste0(   \"County: \", md_county_il_merged$NAME, \"<br/>\",   \"Median Income: \", scales::dollar(as.numeric(md_county_il_merged$median_income)), \"<br/>\",   \"1 Person Family Low (80%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$low.il80_p1)), \"<br/>\",   \"1 Person Family Very Low (50%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$very_low.il50_p1)), \"<br/>\",   \"1 Person Family Extremely Low (30%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$extremely_low.il30_p1))) %>%    lapply(htmltools::HTML) label_il_p2 <- paste0(   \"County: \", md_county_il_merged$NAME, \"<br/>\",   \"Median Income: \", scales::dollar(as.numeric(md_county_il_merged$median_income)), \"<br/>\",   \"2 Person Family Low (80%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$low.il80_p2)), \"<br/>\",   \"2 Person Family Very Low (50%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$very_low.il50_p2)), \"<br/>\",   \"2 Person Family Extremely Low (30%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$extremely_low.il30_p2))) %>%    lapply(htmltools::HTML) label_il_p3 <- paste0(   \"County: \", md_county_il_merged$NAME, \"<br/>\",   \"Median Income: \", scales::dollar(as.numeric(md_county_il_merged$median_income)), \"<br/>\",   \"3 Person Family Low (80%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$low.il80_p3)), \"<br/>\",   \"3 Person Family Very Low (50%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$very_low.il50_p3)), \"<br/>\",   \"3 Person Family Extremely Low (30%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$extremely_low.il30_p3))) %>%    lapply(htmltools::HTML) label_il_p4 <- paste0(   \"County: \", md_county_il_merged$NAME, \"<br/>\",   \"Median Income: \", scales::dollar(as.numeric(md_county_il_merged$median_income)), \"<br/>\",   \"4 Person Family Low (80%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$low.il80_p4)), \"<br/>\",   \"4 Person Family Very Low (50%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$very_low.il50_p4)), \"<br/>\",   \"4 Person Family Extremely Low (30%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$extremely_low.il30_p4))) %>%    lapply(htmltools::HTML) label_il_p5 <- paste0(   \"County: \", md_county_il_merged$NAME, \"<br/>\",   \"Median Income: \", scales::dollar(as.numeric(md_county_il_merged$median_income)), \"<br/>\",   \"5 Person Family Low (80%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$low.il80_p5)), \"<br/>\",   \"5 Person Family Very Low (50%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$very_low.il50_p5)), \"<br/>\",   \"5 Person Family Extremely Low (30%) Income Limits: \", scales::dollar(as.numeric(md_county_il_merged$extremely_low.il30_p5))) %>%    lapply(htmltools::HTML) # The legends overlap with the zoom control buttons, need to move these controls.  leaflet(width = \"100%\", options = leafletOptions(zoomControl = FALSE)) %>%   htmlwidgets::onRender(\"function(el, x){                         L.control.zoom({position: 'topright'}).addTo(this)                         }\")%>%      addProviderTiles(\"CartoDB\") %>%       addPolygons(data = md_county_fmr_merged, fillColor = ~pal_md_fmr(as.numeric(Efficiency)),               weight = 2,               opacity = 1,               color = \"white\",               dashArray = \"3\",               fillOpacity = 0.7,               highlight = highlightOptions(weight = 2,                                            color = \"#666\",                                            dashArray = \"\",                                            fillOpacity = 0.7,                                            bringToFront = TRUE),               label = label_fmr,               group = \"Fair Markets Rent\") %>%      addPolygons(data = md_county_il_merged, fillColor = ~pal_md_il(as.numeric(median_income)),               weight = 2,               opacity = 1,               color = \"white\",               dashArray = \"3\",               fillOpacity = 0.7,               highlight = highlightOptions(weight = 2,                                            color = \"#666\",                                            dashArray = \"\",                                            fillOpacity = 0.7,                                            bringToFront = TRUE),               label = label_il_p1,               group = \"Income Limits-1 person\") %>%       addPolygons(data = md_county_il_merged, fillColor = ~pal_md_il(as.numeric(median_income)),               weight = 2,               opacity = 1,               color = \"white\",               dashArray = \"3\",               fillOpacity = 0.7,               highlight = highlightOptions(weight = 2,                                            color = \"#666\",                                            dashArray = \"\",                                            fillOpacity = 0.7,                                            bringToFront = TRUE),               label = label_il_p2,               group = \"Income Limits-2 person\") %>%           addPolygons(data = md_county_il_merged, fillColor = ~pal_md_il(as.numeric(median_income)),               weight = 2,               opacity = 1,               color = \"white\",               dashArray = \"3\",               fillOpacity = 0.7,               highlight = highlightOptions(weight = 2,                                            color = \"#666\",                                            dashArray = \"\",                                            fillOpacity = 0.7,                                            bringToFront = TRUE),               label = label_il_p3,               group = \"Income Limits-3 person\") %>%           addPolygons(data = md_county_il_merged, fillColor = ~pal_md_il(as.numeric(median_income)),               weight = 2,               opacity = 1,               color = \"white\",               dashArray = \"3\",               fillOpacity = 0.7,               highlight = highlightOptions(weight = 2,                                            color = \"#666\",                                            dashArray = \"\",                                            fillOpacity = 0.7,                                            bringToFront = TRUE),               label = label_il_p4,               group = \"Income Limits-4 person\") %>%           addPolygons(data = md_county_il_merged, fillColor = ~pal_md_il(as.numeric(median_income)),               weight = 2,               opacity = 1,               color = \"white\",               dashArray = \"3\",               fillOpacity = 0.7,               highlight = highlightOptions(weight = 2,                                            color = \"#666\",                                            dashArray = \"\",                                            fillOpacity = 0.7,                                            bringToFront = TRUE),               label = label_il_p5,               group = \"Income Limits-5 person\") %>%         addLayersControl(overlayGroups = c(\"Fair Markets Rent\", \"Income Limits-1 person\", \"Income Limits-2 person\", \"Income Limits-3 person\", \"Income Limits-4 person\",\"Income Limits-5 person\"), baseGroups = \"CartoDB\") %>%      # add legend   addLegend(\"bottomright\",     pal = pal_md_fmr,     values = as.numeric(md_county_fmr_merged$Efficiency),             opacity = 0.7,             title = htmltools::HTML(\"Fair Markets Rent <br>                                     by County\"), group = \"Fair Markets Rent\") %>%        addLegend(\"bottomleft\",       pal = pal_md_il,             values = as.numeric(md_county_il_merged$median_income),             opacity = 0.7,             title = htmltools::HTML(\"Income Limits <br>                                     by County\"), group = \"Income Limits\") %>% setView(lat = 39, lng = -77, zoom = 6)"},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL.html","id":"observations","dir":"Articles","previous_headings":"","what":"Observations","title":"Visualizing-FMR-and-IL","text":"Using rhud package download FMR IL data, combined Leaflet package map visualization, users can understand data intuitively.","code":""},{"path":"https://etam4260.github.io/rhud/articles/Visualizing-FMR-and-IL.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Visualizing-FMR-and-IL","text":"U.S. Department Housing Urban Development. Fair Market Rents (40th Percentile Rents). https://www.huduser.gov/portal/datasets/fmr.html. (Accessed 04/03/22) U.S. Department Housing Urban Development. Income Limits. https://www.huduser.gov/portal/datasets/il.html. (Accessed 04/03/22)","code":""},{"path":"https://etam4260.github.io/rhud/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emmet Tam. Author, maintainer, copyright holder. Allison Reilly. Contributor. Hamed Ghaedi. Contributor. Shuyu Jin. Contributor.","code":""},{"path":"https://etam4260.github.io/rhud/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tam E, Reilly , Ghaedi H, Jin S (2022). rhud: R Interface HUD (US Department Housing Urban Development) APIs. 0.3.0.9000, https://github.com/etam4260/rhud/. Tam E, Reilly , Ghaedi H, Jin S (2022). rhud: R interface accessing HUD (US Department Housing Urban Development) APIs. doi: 10.5281/zenodo.6644503, cite package 'rhud' publications use:, https://doi.org/10.5281/zenodo.6644503.","code":"@Manual{,   title = {rhud: A R Interface for the HUD (US Department of Housing and Urban Development) APIs},   author = {Emmet Tam and Allison Reilly and Hamed Ghaedi and Shuyu Jin},   year = {2022},   note = {0.3.0.9000},   url = {https://github.com/etam4260/rhud/}, } @Manual{,   title = {rhud: A R interface for accessing HUD (US Department of Housing and Urban Development) APIs},   author = {Emmet Tam and Allison Reilly and Hamed Ghaedi and Shuyu Jin},   year = {2022},   note = {To cite package 'rhud' in publications use:},   publisher = {Zenodo},   version = {0.3.0.9000},   doi = {10.5281/zenodo.6644503},   url = {https://doi.org/10.5281/zenodo.6644503}, }"},{"path":[]},{"path":"https://etam4260.github.io/rhud/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"A R interface for accessing HUD (US Department of Housing and Urban Development) APIs","text":"Please cite package using: Tam E, Reilly , Ghaedi H, Jin S (2022). rhud: R Interface HUD       (US Department Housing Urban Development) APIs. 0.3.0.9000,       https://github.com/etam4260/rhud/. python developer? Check hudpy instead.","code":""},{"path":"https://etam4260.github.io/rhud/index.html","id":"housing-and-urban-development-in-r","dir":"","previous_headings":"","what":"Housing and Urban Development in R","title":"A R interface for accessing HUD (US Department of Housing and Urban Development) APIs","text":"interface uses HUD User Data API endorsed certified HUD User Although HUD provide datasets programs, currently supported API. goal project provide easy--use interface access various open-source APIs provided U.S Department Housing Urban Development. include USPS Crosswalk Files, Fair Markets Rent, Income Limits, Comprehensive Housing Affordability Strategy. Please read https://www.huduser.gov/portal/dataset/api-terms--service.html terms service. According HUD USER: services, utilize access API, display following notice prominently within application: “product uses HUD User Data API endorsed certified HUD User.” may use HUD User name order identify source API content subject rules. may use HUD User name, like imply endorsement product, service, entity, --profit, commercial otherwise.","code":""},{"path":"https://etam4260.github.io/rhud/index.html","id":"hud-user","dir":"","previous_headings":"","what":"HUD User","title":"A R interface for accessing HUD (US Department of Housing and Urban Development) APIs","text":"According (HUD User Home Page | HUD USER), HUD User U.S. Department Housing Urban Development information source includes reports reference documents. HUD USER founded 1978 Department Housing Urban Development’s Office Policy Development Research. HUD User maintains API gain access data. However, API system can confusing provides information JSON format rather data-frame like object. Although exist file downloadables, R users may want able extract specific bits data memory.","code":""},{"path":"https://etam4260.github.io/rhud/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A R interface for accessing HUD (US Department of Housing and Urban Development) APIs","text":"can install development version GitHub : details setup utilize package. Please go https://etam4260.github.io/rhud/. Select [Setup] navigation bar.","code":"# install.packages(\"devtools\") devtools::install_github(\"etam4260/rhud\")"},{"path":"https://etam4260.github.io/rhud/index.html","id":"key-access","dir":"","previous_headings":"","what":"Key Access","title":"A R interface for accessing HUD (US Department of Housing and Urban Development) APIs","text":"use functions provided package, need get access HUD USER via token. Go https://www.huduser.gov/hudapi/public/login register account create token access datasets provided HUD. include selecting USPS Crosswalk, Fair Markets Rent, Income Limits, Comprehensive Housing Affordability Strategy. Now copy paste key hud_set_key() function used throughout R session.","code":"hud_set_key(\"sample-key\")"},{"path":"https://etam4260.github.io/rhud/index.html","id":"simplistic-example","dir":"","previous_headings":"","what":"Simplistic Example","title":"A R interface for accessing HUD (US Department of Housing and Urban Development) APIs","text":"sample provided shows query USPS Crosswalk API","code":"hud_cw_zip_tract(zip = '35213', year = c('2010'), quarter = c('1'))"},{"path":"https://etam4260.github.io/rhud/index.html","id":"available-data","dir":"","previous_headings":"","what":"Available Data","title":"A R interface for accessing HUD (US Department of Housing and Urban Development) APIs","text":"APIs datasets library interfaces listed . HUD also provide miscellaneous supplemental APIs . HUD User USPS Crosswalk Small Areas Fair Markets Rent Income Limits Comprehensive Housing Affordability Strategy US Geographic Entities Key access Caching Utilities","code":""},{"path":"https://etam4260.github.io/rhud/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"A R interface for accessing HUD (US Department of Housing and Urban Development) APIs","text":"Emmet Tam(https://github.com/etam4260)[emmet_tam@yahoo.com] Allison Reilly[areilly2@umd.edu] Hamed Ghaedi[hghaedi@terpmail.umd.edu] Shuyu Jin(https://github.com/geojsy)[geojsy@umd.edu]","code":""},{"path":"https://etam4260.github.io/rhud/index.html","id":"disclaimers","dir":"","previous_headings":"","what":"Disclaimers","title":"A R interface for accessing HUD (US Department of Housing and Urban Development) APIs","text":"License: GPL >= 2 get citation information rhud R, type citation(package = ‘rhud’) interface uses HUD User Data API endorsed certified HUD User. limit maximum number API calls 1200 queries min. function call correspond single API call! WIP please report issues bugs : https://github.com/etam4260/rhud/issues open source, please fork introduce pull requests!","code":""},{"path":"https://etam4260.github.io/rhud/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"A R interface for accessing HUD (US Department of Housing and Urban Development) APIs","text":"HUD User Home Page: HUD USER. HUD User Home Page | HUD USER. (n.d.). Retrieved         February 24, 2022, https://www.huduser.gov/portal/home.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/pull_request_template.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"rhud: Pull Request Template","text":"Please include summary change issue fixed. Please also include relevant motivation context. List dependencies required change. Fixes # [issue]","code":""},{"path":"https://etam4260.github.io/rhud/pull_request_template.html","id":"type-of-change","dir":"","previous_headings":"","what":"Type of change","title":"rhud: Pull Request Template","text":"Bug fix (non-breaking change fixes issue) New feature (non-breaking change adds functionality) Breaking change (fix feature cause existing functionality work expected) Testing Infrastructure Documentation","code":""},{"path":"https://etam4260.github.io/rhud/pull_request_template.html","id":"how-has-this-been-tested","dir":"","previous_headings":"","what":"How Has This Been Tested?","title":"rhud: Pull Request Template","text":"Please describe tests ran verify changes. Provide instructions can reproduce. Please also list relevant details test configuration","code":""},{"path":"https://etam4260.github.io/rhud/pull_request_template.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist:","title":"rhud: Pull Request Template","text":"performed self-review code commented code, particularly hard--understand areas changes generate new warnings added tests prove fix effective feature works New existing unit tests pass locally changes","code":""},{"path":"https://etam4260.github.io/rhud/reference/cbsa_in_z.html","id":null,"dir":"Reference","previous_headings":"","what":"CBSA Addresses in Zip Addresses? — cbsa_in_z","title":"CBSA Addresses in Zip Addresses? — cbsa_in_z","text":"Given cbsa(s) zip(s), determine overlap using (United States Postal Service) USPS Crosswalk files. Overlap described residential, business, , total addresses reside .","code":""},{"path":"https://etam4260.github.io/rhud/reference/cbsa_in_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CBSA Addresses in Zip Addresses? — cbsa_in_z","text":"","code":"cbsa_in_z(cbsa, zip, year, quarter, key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/cbsa_in_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CBSA Addresses in Zip Addresses? — cbsa_in_z","text":"cbsa cbsa(s) determine overlap zip(s). zip zip(s) determine overlap cbsa(s). year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key API key user. must go HUD sign account request API key.","code":""},{"path":"https://etam4260.github.io/rhud/reference/cbsa_in_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CBSA Addresses in Zip Addresses? — cbsa_in_z","text":"cbsa(s) exist zip(s) specified, TRUE returned.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/cbsa_in_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CBSA Addresses in Zip Addresses? — cbsa_in_z","text":"","code":"if (FALSE) {  cbsa_in_z(cbsa = 43340, zip = 71052, year = 2019, quarter = 1)  }"},{"path":"https://etam4260.github.io/rhud/reference/cbsadiv_in_z.html","id":null,"dir":"Reference","previous_headings":"","what":"CBSAdiv Addresses in Zip Addresses? — cbsadiv_in_z","title":"CBSAdiv Addresses in Zip Addresses? — cbsadiv_in_z","text":"Given cbsadiv(s) zip(s), determine overlap using (United States Postal Service) USPS Crosswalk files. Overlap described residential, business, , total addresses reside .","code":""},{"path":"https://etam4260.github.io/rhud/reference/cbsadiv_in_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CBSAdiv Addresses in Zip Addresses? — cbsadiv_in_z","text":"","code":"cbsadiv_in_z(cbsadiv, zip, year, quarter, key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/cbsadiv_in_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CBSAdiv Addresses in Zip Addresses? — cbsadiv_in_z","text":"cbsadiv cbsadiv(s) determine overlap zip(s). zip zip(s) determine overlap cbsadiv(s). year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key API key user. must go HUD sign account request API key.","code":""},{"path":"https://etam4260.github.io/rhud/reference/cbsadiv_in_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CBSAdiv Addresses in Zip Addresses? — cbsadiv_in_z","text":"cbsadiv(s) exist zip(s) specified, TRUE returned.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/cbsadiv_in_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CBSAdiv Addresses in Zip Addresses? — cbsadiv_in_z","text":"","code":"if (FALSE) {  cbsadiv_in_z(cbsadiv = 43340, zip = 71052, year = 2017, quarter = 4)  }"},{"path":"https://etam4260.github.io/rhud/reference/cd_in_z.html","id":null,"dir":"Reference","previous_headings":"","what":"Congressional District Addresses in Zip Addresses? — cd_in_z","title":"Congressional District Addresses in Zip Addresses? — cd_in_z","text":"Given congressional district(s) zip(s), determine overlap using (United States Postal Service) USPS Crosswalk files. Overlap described residential, business, , total addresses reside .","code":""},{"path":"https://etam4260.github.io/rhud/reference/cd_in_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Congressional District Addresses in Zip Addresses? — cd_in_z","text":"","code":"cd_in_z(cd, zip, year, quarter, key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/cd_in_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Congressional District Addresses in Zip Addresses? — cd_in_z","text":"cd cd(s) determine overlap zip(s). zip zip(s) determine overlap cd(s). year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key API key user. must go HUD sign account request API key.","code":""},{"path":"https://etam4260.github.io/rhud/reference/cd_in_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Congressional District Addresses in Zip Addresses? — cd_in_z","text":"cd(s) exist zip(s) specified, TRUE returned.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/cd_in_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Congressional District Addresses in Zip Addresses? — cd_in_z","text":"","code":"if (FALSE) {  cd_in_z(cd = 2204, zip = 71052, year = 2019, quarter = 4)  }"},{"path":"https://etam4260.github.io/rhud/reference/crosswalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk a Dataset — crosswalk","title":"Crosswalk a Dataset — crosswalk","text":"Using US Housing Urban Development USPS Crosswalk files, crosswalk entire dataset. Currently supported crosswalks: zip-tract zip-county zip-cbsa zip-cbsadiv (Available 4th Quarter 2017 onwards) zip-cd tract-zip county-zip cbsa-zip cbsadiv-zip (Available 4th Quarter 2017 onwards) cd-zip zip-countysub (Available 2nd Quarter 2018 onwards) countysub-zip (Available 2nd Quarter 2018 onwards)","code":""},{"path":"https://etam4260.github.io/rhud/reference/crosswalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk a Dataset — crosswalk","text":"","code":"crosswalk(   data,   geoid,   geoid_col,   cw_geoid,   cw_geoid_col = NA,   method = NA,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/crosswalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk a Dataset — crosswalk","text":"data dataset rows describing measurements zip, county, county subdivision (countysub), congressional district (cd), census tract, core base statistical area (cbsa), core based statistical area division (cbsadiv) geographic identifier. zip tract county countysub cbsa cbsadiv cd geoid current geoid dataset described : must zip, county, countysub, cd, tract, cbsa, cbsadiv geographic identifier. zip tract county countysub cbsa cbsadiv cd geoid_col column containing geographic identifier; must zip, county, county subdivision (countysub), congressional district (cd), census tract, core base statistical area (cbsa), core based statistical area division (cbsadiv) geographic identifier. Supply either name column index. elements column must numbers proper length. example, zip codes must 5 digit numbers. cw_geoid geoid crosswalk dataset ; must zip, county, county subdivision (countysub), congressional district (cd), census tract, core base statistical area (cbsa), core based statistical area division (cbsadiv) geoid. zip tract county countysub cbsa cbsadiv cd cw_geoid_col columns dataset distribute according method ratio. method empty, allocation method applied -- crosswalk file just merged dataset. elements columns must numbers . method allocation method use: residential, business, , total. method empty, allocation method applied -- crosswalk file just merged dataset. res bus tot oth year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/crosswalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk a Dataset — crosswalk","text":"dataframe containing crosswalked dataset.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/crosswalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk a Dataset — crosswalk","text":"","code":"if (FALSE) { library(rhud)  sample <- data.frame(population = c(42134, 12413, 13132),                      county = c(24047, 24045, 24043))  crosswalk(data = sample, geoid = \"county\", geoid_col = \"county\",           cw_geoid = \"zip\")  crosswalk(data = sample, geoid = \"county\", geoid_col = \"county\",           cw_geoid = \"zip\", cw_geoid_col = \"population\", method = \"res\")  crosswalk(data = sample, geoid = \"county\", geoid_col = \"county\",           cw_geoid = \"zip\", cw_geoid_col = \"population\", method = \"bus\")  crosswalk(data = sample, geoid = \"county\", geoid_col = \"county\",           cw_geoid = \"zip\", cw_geoid_col = \"population\", method = \"bus\",           year = 2018, quarter = 1)  }"},{"path":"https://etam4260.github.io/rhud/reference/cty_in_z.html","id":null,"dir":"Reference","previous_headings":"","what":"County Addresses in Zip Addresses? — cty_in_z","title":"County Addresses in Zip Addresses? — cty_in_z","text":"Given county(s) zip(s), determine overlap using (United States Postal Service) USPS Crosswalk files. Overlap described residential, business, , total addresses reside .","code":""},{"path":"https://etam4260.github.io/rhud/reference/cty_in_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"County Addresses in Zip Addresses? — cty_in_z","text":"","code":"cty_in_z(county, zip, year, quarter, key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/cty_in_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"County Addresses in Zip Addresses? — cty_in_z","text":"county county(s) determine overlap zip(s). zip zip(s) determine overlap county(s). year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key API key user. must go HUD sign account request API key.","code":""},{"path":"https://etam4260.github.io/rhud/reference/cty_in_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"County Addresses in Zip Addresses? — cty_in_z","text":"county(s) exist zip(s) specified, TRUE returned.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/cty_in_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"County Addresses in Zip Addresses? — cty_in_z","text":"","code":"if (FALSE) {  cty_in_z(county = 22031, zip = 71052, year = 2019, quarter = 2)  }"},{"path":"https://etam4260.github.io/rhud/reference/ctysb_in_z.html","id":null,"dir":"Reference","previous_headings":"","what":"Countysub Addresses in Zip Addresses? — ctysb_in_z","title":"Countysub Addresses in Zip Addresses? — ctysb_in_z","text":"Given countysub(s) zip code(s), determine overlap using (United States Postal Service) USPS Crosswalk files. Overlap described residential, business, , total addresses reside .","code":""},{"path":"https://etam4260.github.io/rhud/reference/ctysb_in_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Countysub Addresses in Zip Addresses? — ctysb_in_z","text":"","code":"ctysb_in_z(countysub, zip, year, quarter, key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/ctysb_in_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Countysub Addresses in Zip Addresses? — ctysb_in_z","text":"countysub countysub(s). determine overlap zip(s). zip zip(s). determine overlap countysub(s). year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key API key user. must go HUD sign account request API key.","code":""},{"path":"https://etam4260.github.io/rhud/reference/ctysb_in_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Countysub Addresses in Zip Addresses? — ctysb_in_z","text":"countysub(s) exist zip(s) specified, TRUE returned.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/ctysb_in_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Countysub Addresses in Zip Addresses? — ctysb_in_z","text":"","code":"if (FALSE) {  ctysb_in_z(countysub = 2203194756, zip = 71052, year = 2019, quarter = 2)  }"},{"path":"https://etam4260.github.io/rhud/reference/grapes-cbsa_in_z-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"CBSA Addresses in Zip Addresses? — %cbsa_in_z%","title":"CBSA Addresses in Zip Addresses? — %cbsa_in_z%","text":"use function, HUD_KEY system environment variable must set first: use hud_set_key(\"the_key\") . Given cbsa(s) zip(s), determine overlap using crosswalk files. Overlap described residential, business, , total addresses reside . means possible certain geoids(lhs) counted even though boundaries intersect queried geoids(rhs). likely addresses lie intersecting region. Infix operators default recent year quarter crosswalk files available. modifying year quarter parameter, take look non-infix versions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-cbsa_in_z-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CBSA Addresses in Zip Addresses? — %cbsa_in_z%","text":"","code":"cbsa %cbsa_in_z% zip"},{"path":"https://etam4260.github.io/rhud/reference/grapes-cbsa_in_z-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CBSA Addresses in Zip Addresses? — %cbsa_in_z%","text":"cbsa cbsa(s) determine overlap zip(s). zip zip(s) determine overlap cbsa(s).","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-cbsa_in_z-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CBSA Addresses in Zip Addresses? — %cbsa_in_z%","text":"cbsa(s) exist zip(s) specified, TRUE returned.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-cbsa_in_z-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CBSA Addresses in Zip Addresses? — %cbsa_in_z%","text":"","code":"if (FALSE) {  43340 %cbsa_in_z% 71052  }"},{"path":"https://etam4260.github.io/rhud/reference/grapes-cbsadiv_in_z-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"CBSAdiv Addresses in Zip Addresses? — %cbsadiv_in_z%","title":"CBSAdiv Addresses in Zip Addresses? — %cbsadiv_in_z%","text":"use function, HUD_KEY system environment variable must set first: use hud_set_key(\"the_key\") . Given cbsadiv(s) zip(s), determine overlap using crosswalk files. Overlap described residential, business, , total addresses reside . means possible certain geoids(lhs) counted even though boundaries intersect queried geoids(rhs). likely addresses lie intersecting region. Infix operators default recent year quarter crosswalk files available. modifying year quarter parameter, take look non-infix versions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-cbsadiv_in_z-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CBSAdiv Addresses in Zip Addresses? — %cbsadiv_in_z%","text":"","code":"cbsadiv %cbsadiv_in_z% zip"},{"path":"https://etam4260.github.io/rhud/reference/grapes-cbsadiv_in_z-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CBSAdiv Addresses in Zip Addresses? — %cbsadiv_in_z%","text":"cbsadiv cbsadiv(s) determine overlap zip(s). zip zip(s) determine overlap cbsadiv(s).","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-cbsadiv_in_z-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CBSAdiv Addresses in Zip Addresses? — %cbsadiv_in_z%","text":"cbsadiv(s) exist zip(s) specified, TRUE returned.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-cbsadiv_in_z-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CBSAdiv Addresses in Zip Addresses? — %cbsadiv_in_z%","text":"","code":"if (FALSE) {  # HUD API is broken for year 2021, quarter 3.  43340 %z_in_cbsadiv% 71052  }"},{"path":"https://etam4260.github.io/rhud/reference/grapes-cd_in_z-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Congressional District Addresses in Zip Addresses? — %cd_in_z%","title":"Congressional District Addresses in Zip Addresses? — %cd_in_z%","text":"use function, HUD_KEY system environment variable must set first: use hud_set_key(\"the_key\") . Given congressional district(s) zip(s), determine overlap using crosswalk files. Overlap described residential, business, , total addresses reside . means possible certain geoids(lhs) counted even though boundaries intersect queried geoids(rhs). likely addresses lie intersecting region. Infix operators default recent year quarter crosswalk files available. modifying year quarter parameter, take look non-infix versions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-cd_in_z-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Congressional District Addresses in Zip Addresses? — %cd_in_z%","text":"","code":"cd %cd_in_z% zip"},{"path":"https://etam4260.github.io/rhud/reference/grapes-cd_in_z-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Congressional District Addresses in Zip Addresses? — %cd_in_z%","text":"cd cd(s) determine overlap zip(s). zip zip(s). determine overlap cd(s).","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-cd_in_z-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Congressional District Addresses in Zip Addresses? — %cd_in_z%","text":"cd(s) exist zip(s) specified, TRUE returned.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-cd_in_z-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Congressional District Addresses in Zip Addresses? — %cd_in_z%","text":"","code":"if (FALSE) {  2204 %cd_in_z% 71052  }"},{"path":"https://etam4260.github.io/rhud/reference/grapes-cty_in_z-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"County Addresses in Zip Addresses? — %cty_in_z%","title":"County Addresses in Zip Addresses? — %cty_in_z%","text":"use function, HUD_KEY system environment variable must set first: use hud_set_key(\"the_key\") . Given county(s) zip(s), determine overlap using crosswalk files. Overlap described residential, business, , total addresses reside . means possible certain geoids(lhs) counted even though boundaries intersect queried geoids(rhs). likely addresses lie intersecting region. Infix operators default recent year quarter crosswalk files available. modifying year quarter parameter, take look non-infix versions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-cty_in_z-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"County Addresses in Zip Addresses? — %cty_in_z%","text":"","code":"county %cty_in_z% zip"},{"path":"https://etam4260.github.io/rhud/reference/grapes-cty_in_z-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"County Addresses in Zip Addresses? — %cty_in_z%","text":"county county(s) determine overlap zip(s). zip zip(s) determine overlap county(s).","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-cty_in_z-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"County Addresses in Zip Addresses? — %cty_in_z%","text":"county(s) exist zip(s) specified, TRUE returned.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-cty_in_z-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"County Addresses in Zip Addresses? — %cty_in_z%","text":"","code":"if (FALSE) {  22031 %cty_in_z% 71052  }"},{"path":"https://etam4260.github.io/rhud/reference/grapes-ctysb_in_z-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Countysub Addresses in Zip Addresses? — %ctysb_in_z%","title":"Countysub Addresses in Zip Addresses? — %ctysb_in_z%","text":"use function, HUD_KEY system environment variable must set first: use hud_set_key(\"the_key\") . Given countysub(s) zip(s), determine overlap using crosswalk files. Overlap described residential, business, , total addresses reside . means possible certain geoids(lhs) counted even though boundaries intersect queried geoids(rhs). likely addresses lie intersecting region. Infix operators default recent year quarter crosswalk files available. modifying year quarter parameter, take look non-infix versions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-ctysb_in_z-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Countysub Addresses in Zip Addresses? — %ctysb_in_z%","text":"","code":"countysub %ctysb_in_z% zip"},{"path":"https://etam4260.github.io/rhud/reference/grapes-ctysb_in_z-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Countysub Addresses in Zip Addresses? — %ctysb_in_z%","text":"countysub countysub(s) determine overlap zip(s). zip zip(s). determine overlap countysub(s).","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-ctysb_in_z-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Countysub Addresses in Zip Addresses? — %ctysb_in_z%","text":"countysub(s) exist zip(s) specified, TRUE returned.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-ctysb_in_z-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Countysub Addresses in Zip Addresses? — %ctysb_in_z%","text":"","code":"if (FALSE) {  2203194756 %ctysb_in_z% 71052  }"},{"path":"https://etam4260.github.io/rhud/reference/grapes-trt_in_z-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Tract Addresses in Zip Addresses? — %trt_in_z%","title":"Tract Addresses in Zip Addresses? — %trt_in_z%","text":"use function, HUD_KEY system environment variable must set first: use hud_set_key(\"the_key\") . Given tract(s) zip code(s), determine overlap using crosswalk files. Overlap described residential, business, , total addresses reside . means possible certain geoids(lhs) counted even though boundaries intersect queried geoids(rhs). likely addresses lie intersecting region. Infix operators default recent year quarter crosswalk files available. modifying year quarter parameter, take look non-infix versions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-trt_in_z-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tract Addresses in Zip Addresses? — %trt_in_z%","text":"","code":"tract %trt_in_z% zip"},{"path":"https://etam4260.github.io/rhud/reference/grapes-trt_in_z-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tract Addresses in Zip Addresses? — %trt_in_z%","text":"tract tract(s) determine overlap zip(s) zip zip(s) determine overlap tract(s)","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-trt_in_z-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tract Addresses in Zip Addresses? — %trt_in_z%","text":"tract(s) exist zip(s) specified, TRUE returned.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-trt_in_z-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tract Addresses in Zip Addresses? — %trt_in_z%","text":"","code":"if (FALSE) {  22031950600 %trt_in_z% 71052  }"},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cbsa-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip Addresses in CBSA Addresses? — %z_in_cbsa%","title":"Zip Addresses in CBSA Addresses? — %z_in_cbsa%","text":"use function, HUD_KEY system environment variable must set first: use hud_set_key(\"the_key\") . Given zip code(s) cbsa(s), determine overlap using crosswalk files. Overlap described residential, business, , total addresses reside . means possible certain geoids(lhs) counted even though boundaries intersect queried geoids(rhs). likely addresses lie intersecting region. Infix operators default recent year quarter crosswalk files available. modifying year quarter parameter, take look non-infix versions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cbsa-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip Addresses in CBSA Addresses? — %z_in_cbsa%","text":"","code":"zip %z_in_cbsa% cbsa"},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cbsa-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip Addresses in CBSA Addresses? — %z_in_cbsa%","text":"zip zip(s) determine overlap cbsa(s) cbsa cbsa(s) determine overlap zip(s)","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cbsa-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip Addresses in CBSA Addresses? — %z_in_cbsa%","text":"zip(s) exist cbsa(s) specified, TRUE returned.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cbsa-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip Addresses in CBSA Addresses? — %z_in_cbsa%","text":"","code":"if (FALSE) {  71052 %z_in_cbsa% 43340  }"},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cbsadiv-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip Addresses in CBSAdiv Addresses? — %z_in_cbsadiv%","title":"Zip Addresses in CBSAdiv Addresses? — %z_in_cbsadiv%","text":"use function, HUD_KEY system environment variable must set first: use hud_set_key(\"the_key\") . Given zip code(s) cbsadiv(s), determine overlap using crosswalk files. Overlap described residential, business, , total addresses reside . means possible certain geoids(lhs) counted even though boundaries intersect queried geoids(rhs). likely addresses lie intersecting region. Infix operators default recent year quarter crosswalk files available. modifying year quarter parameter, take look non-infix versions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cbsadiv-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip Addresses in CBSAdiv Addresses? — %z_in_cbsadiv%","text":"","code":"zip %z_in_cbsadiv% cbsadiv"},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cbsadiv-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip Addresses in CBSAdiv Addresses? — %z_in_cbsadiv%","text":"zip zip(s) determine overlap cbsadiv(s) cbsadiv cbsadiv(s) determine overlap zip(s)","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cbsadiv-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip Addresses in CBSAdiv Addresses? — %z_in_cbsadiv%","text":"zip(s) exist cbsadiv(s) specified, TRUE returned.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cbsadiv-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip Addresses in CBSAdiv Addresses? — %z_in_cbsadiv%","text":"","code":"if (FALSE) {  # HUD API is broken for year 2021, quarter 3 for this query  71052 %z_in_cbsadiv% 43340  }"},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cd-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip Addresses in Congressional District Addresses? — %z_in_cd%","title":"Zip Addresses in Congressional District Addresses? — %z_in_cd%","text":"use function, HUD_KEY system environment variable must set first: use hud_set_key(\"the_key\") . Given zip code(s) congressional district(s), determine overlap using crosswalk files. Overlap described residential, business, , total addresses reside . means possible certain geoids(lhs) counted even though boundaries intersect queried geoids(rhs). likely addresses lie intersecting region. Infix operators default recent year quarter crosswalk files available. modifying year quarter parameter, take look non-infix versions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cd-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip Addresses in Congressional District Addresses? — %z_in_cd%","text":"","code":"zip %z_in_cd% cd"},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cd-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip Addresses in Congressional District Addresses? — %z_in_cd%","text":"zip zip(s) determine overlap congressional district(s) cd congressional district(s) determine overlap zip(s)","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cd-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip Addresses in Congressional District Addresses? — %z_in_cd%","text":"zip(s) exist cd(s) specified, TRUE returned.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cd-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip Addresses in Congressional District Addresses? — %z_in_cd%","text":"","code":"if (FALSE) {  71052 %z_in_cd% 2204  }"},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cty-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip Addresses in County Addresses? — %z_in_cty%","title":"Zip Addresses in County Addresses? — %z_in_cty%","text":"use function, HUD_KEY system environment variable must set first: use hud_set_key(\"the_key\") . Given zip code(s) county(s), determine overlap using crosswalk files. Overlap described residential, business, , total addresses reside . means possible certain geoids(lhs) counted even though boundaries intersect queried geoids(rhs). likely addresses lie intersecting region. Infix operators default recent year quarter crosswalk files available. modifying year quarter parameter, take look non-infix versions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cty-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip Addresses in County Addresses? — %z_in_cty%","text":"","code":"zip %z_in_cty% county"},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cty-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip Addresses in County Addresses? — %z_in_cty%","text":"zip zip(s) determine overlap county(s) county county(s) determine overlap zip(s)","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cty-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip Addresses in County Addresses? — %z_in_cty%","text":"zip(s) exist county(s) specified, TRUE returned.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_cty-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip Addresses in County Addresses? — %z_in_cty%","text":"","code":"if (FALSE) {  71052 %z_in_cty% 22031  }"},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_ctysb-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip Addresses in Countysub Addresses? — %z_in_ctysb%","title":"Zip Addresses in Countysub Addresses? — %z_in_ctysb%","text":"use function, HUD_KEY system environment variable must set first: use hud_set_key(\"the_key\") . Given zip code(s) countysub(s), determine overlap using crosswalk files. Overlap described residential, business, , total addresses reside . means possible certain geoids(lhs) counted even though boundaries intersect queried geoids(rhs). likely addresses lie intersecting region. Infix operators default recent year quarter crosswalk files available. modifying year quarter parameter, take look non-infix versions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_ctysb-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip Addresses in Countysub Addresses? — %z_in_ctysb%","text":"","code":"zip %z_in_ctysb% countysub"},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_ctysb-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip Addresses in Countysub Addresses? — %z_in_ctysb%","text":"zip zip(s) determine overlap countysub(s) countysub countysub(s) determine overlap zip(s)","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_ctysb-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip Addresses in Countysub Addresses? — %z_in_ctysb%","text":"zip(s) exist countysub(s) specified, TRUE returned.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_ctysb-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip Addresses in Countysub Addresses? — %z_in_ctysb%","text":"","code":"if (FALSE) {  71052 %z_in_ctysb% 2203194756  }"},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_trt-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip Addresses in Tract Addresses? — %z_in_trt%","title":"Zip Addresses in Tract Addresses? — %z_in_trt%","text":"use function, HUD_KEY system environment variable must set first: use hud_set_key(\"the_key\") . Given zip code(s) tract(s), determine overlap using crosswalk files. Overlap described residential, business, , total addresses reside . means possible certain geoids(lhs) counted even though boundaries intersect queried geoids(rhs). likely addresses lie intersecting region. Infix operators default recent year quarter crosswalk files available. modifying year quarter parameter take look non-infix versions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_trt-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip Addresses in Tract Addresses? — %z_in_trt%","text":"","code":"zip %z_in_trt% tract"},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_trt-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip Addresses in Tract Addresses? — %z_in_trt%","text":"zip zip(s) determine overlap tract(s) tract tract(s) determine overlap zip(s)","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_trt-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip Addresses in Tract Addresses? — %z_in_trt%","text":"zip(s) exist tract(s) specified, TRUE returned.","code":""},{"path":"https://etam4260.github.io/rhud/reference/grapes-z_in_trt-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip Addresses in Tract Addresses? — %z_in_trt%","text":"","code":"if (FALSE) {  71052 %z_in_trt% 22031950600  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_chas.html","id":null,"dir":"Reference","previous_headings":"","what":"Omni-Query for HUD Comprehensive Housing and Affordability Strategy\nAPI — hud_chas","title":"Omni-Query for HUD Comprehensive Housing and Affordability Strategy\nAPI — hud_chas","text":"function queries Comprehensive Housing Affordability Strategy CHAS API provided US Department Housing Urban Development (HUD USER). ordering items stateid input must match entityid input.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Omni-Query for HUD Comprehensive Housing and Affordability Strategy\nAPI — hud_chas","text":"","code":"hud_chas(   type,   state_id = NULL,   entity_id = NULL,   year = c(\"2014-2018\"),   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_chas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Omni-Query for HUD Comprehensive Housing and Affordability Strategy\nAPI — hud_chas","text":"type Queries data based : 1 - Nation 2 - State 3 - County 4 - MCD 5 - Place state_id types 2,3,4,5, must provide state_id. entity_id types 3,4,5, must provide fips code, placecode, mcd code. year Gets year data recorded. Defaults 2014-2018. specific year ranges accepted. 2014-2018 2013-2017 2012-2016 2011-2015 2010-2014 2009-2013 2008-2012 2007-2011 2006-2010 key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Omni-Query for HUD Comprehensive Housing and Affordability Strategy\nAPI — hud_chas","text":"function returns dataframe tibble containing Comprehensive Housing Affordability Strategy data particular state. details measurements, go https://www.huduser.gov/portal/dataset/chas-api.html","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Omni-Query for HUD Comprehensive Housing and Affordability Strategy\nAPI — hud_chas","text":"","code":"if (FALSE) { hud_chas(1)  hud_chas('2', state_id = '56')  hud_chas('3','51','199')  hud_chas('4', '51', 94087)  hud_chas('5', '51', 48996) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_county.html","id":null,"dir":"Reference","previous_headings":"","what":"Comprehensive Housing and Affordability Strategy for the US Counties — hud_chas_county","title":"Comprehensive Housing and Affordability Strategy for the US Counties — hud_chas_county","text":"Returns Comprehensive Housing Affordability Strategy (CHAS)","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_county.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comprehensive Housing and Affordability Strategy for the US Counties — hud_chas_county","text":"","code":"hud_chas_county(   county,   year = c(\"2014-2018\"),   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_county.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comprehensive Housing and Affordability Strategy for the US Counties — hud_chas_county","text":"county county(s) query . Must supply geoid. 2 digit state fip 3 digit county fip. hud_state_counties() show extra 99999 end. Just remove . year years query . year = \"2014-2018\" year = \"2013-2017\" year = \"2012-2016\" year = \"2011-2015\" year = \"2010-2014\" year = \"2009-2013\" year = \"2008-2012\" year = \"2007-2011\" year = \"2006-2010\" key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_county.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comprehensive Housing and Affordability Strategy for the US Counties — hud_chas_county","text":"Returns data frame Comprehensive Housing Affordability Strategy (CHAS) data counties combinations \"county\" \"year\" inputs.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_county.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comprehensive Housing and Affordability Strategy for the US Counties — hud_chas_county","text":"","code":"if (FALSE) {  hud_chas_county(county = c(\"06105\", \"06113\"))  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_nation.html","id":null,"dir":"Reference","previous_headings":"","what":"Comprehensive Housing and Affordability Strategy for the US. — hud_chas_nation","title":"Comprehensive Housing and Affordability Strategy for the US. — hud_chas_nation","text":"Returns Comprehensive Housing Affordability Strategy (CHAS) data entire nation.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_nation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comprehensive Housing and Affordability Strategy for the US. — hud_chas_nation","text":"","code":"hud_chas_nation(year = c(\"2014-2018\"), key = Sys.getenv(\"HUD_KEY\"), to_tibble)"},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_nation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comprehensive Housing and Affordability Strategy for the US. — hud_chas_nation","text":"year years query . year = \"2014-2018\" year = \"2013-2017\" year = \"2012-2016\" year = \"2011-2015\" year = \"2010-2014\" year = \"2009-2013\" year = \"2008-2012\" year = \"2007-2011\" year = \"2006-2010\" key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_nation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comprehensive Housing and Affordability Strategy for the US. — hud_chas_nation","text":"Returns data frame Comprehensive Housing Affordability Strategy (CHAS) data entire nation observations supplied \"year\" input.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_nation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comprehensive Housing and Affordability Strategy for the US. — hud_chas_nation","text":"","code":"if (FALSE) {  hud_chas_nation()  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Comprehensive Housing and Affordability Strategy for US States. — hud_chas_state","title":"Comprehensive Housing and Affordability Strategy for US States. — hud_chas_state","text":"Returns Comprehensive Housing Affordability Strategy (CHAS) data state(s).","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comprehensive Housing and Affordability Strategy for US States. — hud_chas_state","text":"","code":"hud_chas_state(   state,   year = c(\"2014-2018\"),   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comprehensive Housing and Affordability Strategy for US States. — hud_chas_state","text":"state state(s) query . Can supply abbreviation, whole name, geoid. year years query . year = \"2014-2018\" year = \"2013-2017\" year = \"2012-2016\" year = \"2011-2015\" year = \"2010-2014\" year = \"2009-2013\" year = \"2008-2012\" year = \"2007-2011\" year = \"2006-2010\" key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comprehensive Housing and Affordability Strategy for US States. — hud_chas_state","text":"Returns data frame Comprehensive Housing Affordability Strategy (CHAS) data states combinations \"state\" \"year\" inputs.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comprehensive Housing and Affordability Strategy for US States. — hud_chas_state","text":"","code":"if (FALSE) { hud_chas_state(\"CA\") hud_chas_state(\"51\") }"},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state_mcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Comprehensive Housing and Affordability Strategy for\nUS Minor Civil Divisions — hud_chas_state_mcd","title":"Comprehensive Housing and Affordability Strategy for\nUS Minor Civil Divisions — hud_chas_state_mcd","text":"Returns Comprehensive Housing Affordability Strategy (CHAS) data mcd state.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state_mcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comprehensive Housing and Affordability Strategy for\nUS Minor Civil Divisions — hud_chas_state_mcd","text":"","code":"hud_chas_state_mcd(   state,   year = c(\"2014-2018\"),   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state_mcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comprehensive Housing and Affordability Strategy for\nUS Minor Civil Divisions — hud_chas_state_mcd","text":"state state name, abbreviation, fips code. year years query . year = \"2014-2018\" year = \"2013-2017\" year = \"2012-2016\" year = \"2011-2015\" year = \"2010-2014\" year = \"2009-2013\" year = \"2008-2012\" year = \"2007-2011\" year = \"2006-2010\" key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state_mcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comprehensive Housing and Affordability Strategy for\nUS Minor Civil Divisions — hud_chas_state_mcd","text":"Returns dataframe Comprehensive Housing Affordability Strategy (CHAS) data mcds inside states combinations \"state\" \"year\" inputs.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state_mcd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comprehensive Housing and Affordability Strategy for\nUS Minor Civil Divisions — hud_chas_state_mcd","text":"","code":"if (FALSE) {  hud_chas_state_mcd(\"VA\", year = c(\"2014-2018\",\"2013-2017\"))  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state_place.html","id":null,"dir":"Reference","previous_headings":"","what":"Comprehensive Housing and Affordability Strategy for US Places — hud_chas_state_place","title":"Comprehensive Housing and Affordability Strategy for US Places — hud_chas_state_place","text":"Returns Comprehensive Housing Affordability Strategy (CHAS) places state.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state_place.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comprehensive Housing and Affordability Strategy for US Places — hud_chas_state_place","text":"","code":"hud_chas_state_place(   state,   year = c(\"2014-2018\"),   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state_place.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comprehensive Housing and Affordability Strategy for US Places — hud_chas_state_place","text":"state state name, abbreviation, fips code. Make sure state fips 1 digit number, include leading 0. year years query . year = \"2014-2018\" year = \"2013-2017\" year = \"2012-2016\" year = \"2011-2015\" year = \"2010-2014\" year = \"2009-2013\" year = \"2008-2012\" year = \"2007-2011\" year = \"2006-2010\" key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state_place.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comprehensive Housing and Affordability Strategy for US Places — hud_chas_state_place","text":"Returns dataframe Comprehensive Housing Affordability Strategy (CHAS) data places inside states combinations \"state\" \"year\" inputs.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_chas_state_place.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comprehensive Housing and Affordability Strategy for US Places — hud_chas_state_place","text":"","code":"if (FALSE) {  hud_chas_state_place(\"MD\", year = c(\"2014-2018\",\"2013-2017\"))  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_clear_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear RHUD Cache Directory — hud_clear_cache","title":"Clear RHUD Cache Directory — hud_clear_cache","text":"Remove cached data caching directory used store data retrieved using rhud API calls. default, rhud uses non-persistent temporary directory given R session, user might set another directory use.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_clear_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear RHUD Cache Directory — hud_clear_cache","text":"","code":"hud_clear_cache()"},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_clear_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear RHUD Cache Directory — hud_clear_cache","text":"","code":"if (FALSE) {  hud_clear_cache()  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw.html","id":null,"dir":"Reference","previous_headings":"","what":"Omni-Query for HUD Crosswalk Files API — hud_cw","title":"Omni-Query for HUD Crosswalk Files API — hud_cw","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER).","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Omni-Query for HUD Crosswalk Files API — hud_cw","text":"","code":"hud_cw(   type,   query,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Omni-Query for HUD Crosswalk Files API — hud_cw","text":"type Must number 1 12 depending USPS Crosswalk type. can also supply string name. zip-tract zip-county zip-cbsa zip-cbsadiv (Available 4th Quarter 2017 onwards) zip-cd tract-zip county-zip cbsa-zip cbsadiv-zip (Available 4th Quarter 2017 onwards) cd-zip zip-countysub (Available 2nd Quarter 2018 onwards) countysub-zip (Available 2nd Quarter 2018 onwards) query 5 digit USPS ZIP code data retrieve. E.g. 22031 type 1 5 11 . 11 digit unique 2000 2010 Census tract GEOID consisting state FIPS + county FIPS + tract code. Eg: 51059461700  type 6 5 digit unique 2000 2010 Census county GEOID consisting state FIPS + county FIPS. Eg: 51600 type 7 5 digit CBSA code Micropolitan Metropolitan Areas Eg: 10380 type 8 5-digit CBSA Division code applies Metropolitan Areas. Eg: 35614 type 9 4-digit GEOID Congressional District consists state FIPS + Congressional District code. Eg: 7200 type 10 10-digit GEOID County sub Eg: 4606720300 type 12 year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked GEOIDs true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Omni-Query for HUD Crosswalk Files API — hud_cw","text":"function returns dataframe containing crosswalk data one geoid another combinations \"query\", \"year\", \"quarter\" inputs query depends type specified. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_cw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Omni-Query for HUD Crosswalk Files API — hud_cw","text":"","code":"if (FALSE) { hud_cw(type = 1, query = \"35213\", year = c(\"2010\", \"2011\"),    quarter = c(\"1\"))  hud_cw(type = \"2\", query = \"35213\", year = c(\"2016\", \"2020\"),    quarter = c(\"2\"))  hud_cw(type = 3, query = 35213, year = c(\"2012\", \"2011\"),    quarter = c(\"3\"))  hud_cw(type = 4, query = \"22031\", year = c(\"2017\", \"2019\"),    quarter = c(\"4\"))  hud_cw(type = \"5\", query = \"35213\", year = c(2011, \"2012\"),    quarter = c(\"1\", \"2\"))  hud_cw(type = 6, query = \"48201223100\", year = c(\"2017\", \"2010\"),    quarter = c(\"1\", \"2\", \"3\"))  hud_cw(type = 7, query = \"22031\", year = c(\"2010\", \"2011\"),    quarter = c(\"1\", \"2\", \"3\"))  hud_cw(type = 8, query = \"10140\", year = c(\"2010\", \"2011\"),    quarter = c(\"1\", \"2\"))  hud_cw(type = 9, query = \"10380\", year = c(\"2017\"),    quarter = c(\"4\"))  hud_cw(type = 10, query = \"2202\", year = c(\"2010\", \"2011\"),    quarter = c(\"4\", \"3\"))  hud_cw(type = 11, query = \"35213\", year = c(\"2019\", \"2020\"),    quarter = c(\"2\", \"3\"))  hud_cw(type = 12, query = \"4606720300 \", year = c(\"2019\", \"2019\", \"2019\"),    quarter = c(\"4\", \"4\")) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cbsa_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk CBSA to Zip — hud_cw_cbsa_zip","title":"Crosswalk CBSA to Zip — hud_cw_cbsa_zip","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER). returns crosswalk cbsa zip.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cbsa_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk CBSA to Zip — hud_cw_cbsa_zip","text":"","code":"hud_cw_cbsa_zip(   cbsa,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cbsa_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk CBSA to Zip — hud_cw_cbsa_zip","text":"cbsa 5 digit core based statistical area code. year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked geoids true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cbsa_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk CBSA to Zip — hud_cw_cbsa_zip","text":"function returns dataframe containing crosswalk data cbsa zip combinations \"cbsa\", \"year\", \"quarter\" inputs. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cbsa_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk CBSA to Zip — hud_cw_cbsa_zip","text":"","code":"if (FALSE) { library(rhud)  hud_cw_cbsa_zip(cbsa = 10140, year = c('2017'), quarter = c('1'))  hud_cw_cbsa_zip(cbsa = '10140', year = c('2010'), quarter = c('1'),    minimal = TRUE) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cbsadiv_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk CBSAdiv to Zip — hud_cw_cbsadiv_zip","title":"Crosswalk CBSAdiv to Zip — hud_cw_cbsadiv_zip","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER). returns crosswalk cbsadiv zip.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cbsadiv_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk CBSAdiv to Zip — hud_cw_cbsadiv_zip","text":"","code":"hud_cw_cbsadiv_zip(   cbsadiv,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cbsadiv_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk CBSAdiv to Zip — hud_cw_cbsadiv_zip","text":"cbsadiv 5 digit core based statisical area division code. year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked geoids true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cbsadiv_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk CBSAdiv to Zip — hud_cw_cbsadiv_zip","text":"function returns dataframe containing crosswalk data cbsadiv zip combinations \"cbsadiv\", \"year\", \"quarter\" inputs. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cbsadiv_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk CBSAdiv to Zip — hud_cw_cbsadiv_zip","text":"","code":"if (FALSE) { library(rhud)  hud_cw_cbsadiv_zip(cbsadiv = 10380, year = c('2017'), quarter = c('4'))  hud_cw_cbsadiv_zip(cbsadiv = '10380', year = c('2017'), quarter = c('4'),    minimal = TRUE) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cd_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk CD to Zip — hud_cw_cd_zip","title":"Crosswalk CD to Zip — hud_cw_cd_zip","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER). returns crosswalk cd zip.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cd_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk CD to Zip — hud_cw_cd_zip","text":"","code":"hud_cw_cd_zip(   cd,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cd_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk CD to Zip — hud_cw_cd_zip","text":"cd 4 digit congressional district code. year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked geoids true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cd_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk CD to Zip — hud_cw_cd_zip","text":"function returns dataframe containing crosswalk data cd zip combinations \"cd\", \"year\", \"quarter\" inputs. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_cd_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk CD to Zip — hud_cw_cd_zip","text":"","code":"if (FALSE) { library(rhud)  hud_cw_cd_zip(cd = 2202, year = c('2017'), quarter = c('1'))  hud_cw_cd_zip(cd = '2202', year = c('2010'), quarter = c('1'),    minimal = TRUE) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_county_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk County to Zip — hud_cw_county_zip","title":"Crosswalk County to Zip — hud_cw_county_zip","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER). returns crosswalk county zip.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_county_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk County to Zip — hud_cw_county_zip","text":"","code":"hud_cw_county_zip(   county,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_county_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk County to Zip — hud_cw_county_zip","text":"county 5 digit county code. year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked geoids true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_county_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk County to Zip — hud_cw_county_zip","text":"function returns dataframe containing crosswalk data county zip combinations \"county\", \"year\", \"quarter\" inputs. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_county_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk County to Zip — hud_cw_county_zip","text":"","code":"if (FALSE) { library(rhud)  hud_cw_county_zip(county = 22031, year = c('2017'), quarter = c('1'))  hud_cw_county_zip(county = '22031', year = c('2010'), quarter = c('1'),    minimal = TRUE) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_countysub_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk Countysub to Zip — hud_cw_countysub_zip","title":"Crosswalk Countysub to Zip — hud_cw_countysub_zip","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER). returns crosswalk countysub zip.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_countysub_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk Countysub to Zip — hud_cw_countysub_zip","text":"","code":"hud_cw_countysub_zip(   countysub,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_countysub_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk Countysub to Zip — hud_cw_countysub_zip","text":"countysub 10 digit county sub division code. year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked geoids true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_countysub_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk Countysub to Zip — hud_cw_countysub_zip","text":"function returns dataframe containing crosswalk data countysub zip combinations \"countysub\", \"year\", \"quarter\" inputs. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_countysub_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk Countysub to Zip — hud_cw_countysub_zip","text":"","code":"if (FALSE) { library(rhud)  hud_cw_countysub_zip(countysub = '4606720300',    year = c('2019', '2019', '2019'), quarter = c('4','4'))  hud_cw_countysub_zip(countysub = '3706794068',    year = c('2019', '2019', '2019'), quarter = c('4','4'))  hud_cw_countysub_zip(countysub = '3711993268',    year = c('2019', '2019', '2019'), quarter = c('4','4'))  hud_cw_countysub_zip(countysub = '3910383426',    year = c('2019'), quarter = c('1'), minimal = TRUE) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_tract_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk Tract to Zip — hud_cw_tract_zip","title":"Crosswalk Tract to Zip — hud_cw_tract_zip","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER). returns crosswalk tract zip.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_tract_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk Tract to Zip — hud_cw_tract_zip","text":"","code":"hud_cw_tract_zip(   tract,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_tract_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk Tract to Zip — hud_cw_tract_zip","text":"tract 11 digit tract code. year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked geoids true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_tract_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk Tract to Zip — hud_cw_tract_zip","text":"function returns dataframe containing crosswalk data tract zip combinations \"tract\", \"year\", \"quarter\" inputs. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_tract_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk Tract to Zip — hud_cw_tract_zip","text":"","code":"if (FALSE) { library(rhud)  hud_cw_tract_zip(tract = 48201223100, year = c('2017'), quarter = c('1'))  hud_cw_tract_zip(tract = '48201223100', year = c('2010'), quarter = c('1'),    minimal = TRUE) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cbsa.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk Zip to CBSA — hud_cw_zip_cbsa","title":"Crosswalk Zip to CBSA — hud_cw_zip_cbsa","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER). returns crosswalk zip cbsa.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cbsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk Zip to CBSA — hud_cw_zip_cbsa","text":"","code":"hud_cw_zip_cbsa(   zip,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cbsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk Zip to CBSA — hud_cw_zip_cbsa","text":"zip 5 digit (United States Postal Service) USPS zipcode data retrieve. E.g. 22031 type 1 5 11 . year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked geoids true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cbsa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk Zip to CBSA — hud_cw_zip_cbsa","text":"function returns dataframe containing crosswalk data zip cbsa combinations \"zip\", \"year\", \"quarter\" inputs. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cbsa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk Zip to CBSA — hud_cw_zip_cbsa","text":"","code":"if (FALSE) { library(rhud)  hud_cw_zip_cbsa(zip = '35213', year = c('2010'), quarter = c('1'))  hud_cw_zip_cbsa(zip = '35213', year = c('2010'), quarter = c('1'),    minimal = TRUE) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cbsadiv.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk Zip to CBSAdiv — hud_cw_zip_cbsadiv","title":"Crosswalk Zip to CBSAdiv — hud_cw_zip_cbsadiv","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER). returns crosswalk zip cbsadiv.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cbsadiv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk Zip to CBSAdiv — hud_cw_zip_cbsadiv","text":"","code":"hud_cw_zip_cbsadiv(   zip,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cbsadiv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk Zip to CBSAdiv — hud_cw_zip_cbsadiv","text":"zip 5 digit (United States Postal Service) USPS zipcode data retrieve. E.g. 22031 type 1 5 11 . year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked geoids true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cbsadiv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk Zip to CBSAdiv — hud_cw_zip_cbsadiv","text":"function returns dataframe containing crosswalk data zip cbsadiv combinations \"zip\", \"year\", \"quarter\" inputs. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cbsadiv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk Zip to CBSAdiv — hud_cw_zip_cbsadiv","text":"","code":"if (FALSE) { library(rhud)  hud_cw_zip_cbsadiv(zip = '35213', year = c('2017'), quarter = c('4'))  hud_cw_zip_cbsadiv(zip = '35213', year = c('2017'), quarter = c('4'),    minimal = TRUE) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cd.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk Zip to CD — hud_cw_zip_cd","title":"Crosswalk Zip to CD — hud_cw_zip_cd","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER). returns crosswalk zip cd.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk Zip to CD — hud_cw_zip_cd","text":"","code":"hud_cw_zip_cd(   zip,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk Zip to CD — hud_cw_zip_cd","text":"zip 5 digit (United States Postal Service) USPS zipcode data retrieve. E.g. 22031 type 1 5 11 . year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked geoids true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk Zip to CD — hud_cw_zip_cd","text":"function returns dataframe containing crosswalk data zip cd combinations \"zip\", \"year\", \"quarter\" inputs. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_cd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk Zip to CD — hud_cw_zip_cd","text":"","code":"if (FALSE) { library(rhud)  hud_cw_zip_cd(zip = '35213', year = c('2010'), quarter = c('1'))  hud_cw_zip_cd(zip = '35213', year = c('2010'), quarter = c('1'),    minimal = TRUE) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_county.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk Zip to County — hud_cw_zip_county","title":"Crosswalk Zip to County — hud_cw_zip_county","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER). returns crosswalk zip county.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_county.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk Zip to County — hud_cw_zip_county","text":"","code":"hud_cw_zip_county(   zip,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_county.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk Zip to County — hud_cw_zip_county","text":"zip 5 digit (United States Postal Service) USPS zipcode data retrieve. E.g. 22031 type 1 5 11 . year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked geoids true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_county.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk Zip to County — hud_cw_zip_county","text":"function returns dataframe containing crosswalk data zip county combinations \"zip\", \"year\", \"quarter\" inputs. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_county.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk Zip to County — hud_cw_zip_county","text":"","code":"if (FALSE) { library(rhud)  hud_cw_zip_county(zip = '35213', year = c('2010'), quarter = c('1'))  hud_cw_zip_county(zip = '35213', year = c('2010'), quarter = c('1'),    minimal = TRUE) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_countysub.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk Zip to Countysub — hud_cw_zip_countysub","title":"Crosswalk Zip to Countysub — hud_cw_zip_countysub","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER). returns crosswalk zip countysub.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_countysub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk Zip to Countysub — hud_cw_zip_countysub","text":"","code":"hud_cw_zip_countysub(   zip,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_countysub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk Zip to Countysub — hud_cw_zip_countysub","text":"zip 5 digit (United States Postal Service) USPS zipcode data retrieve. E.g. 22031 type 1 5 11 . year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked geoids true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_countysub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk Zip to Countysub — hud_cw_zip_countysub","text":"function returns dataframe containing crosswalk data zip countysub combinations \"zip\", \"year\", \"quarter\" inputs. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_countysub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk Zip to Countysub — hud_cw_zip_countysub","text":"","code":"if (FALSE) { library(rhud)  hud_cw_zip_countysub(zip = 35213, year = c('2019'), quarter = c('2'))  hud_cw_zip_countysub(zip = '35213', year = c('2019'), quarter = c('2'),    minimal = TRUE) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_tract.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosswalk Zip to Tract — hud_cw_zip_tract","title":"Crosswalk Zip to Tract — hud_cw_zip_tract","text":"function queries USPS Crosswalks API provided US Department Housing Urban Development (HUD USER). returns crosswalk zip tract.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_tract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosswalk Zip to Tract — hud_cw_zip_tract","text":"","code":"hud_cw_zip_tract(   zip,   year = format(Sys.Date() - 365, \"%Y\"),   quarter = 1,   minimal = FALSE,   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_tract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosswalk Zip to Tract — hud_cw_zip_tract","text":"zip 5 digit (United States Postal Service) USPS zipcode data retrieve. E.g. 22031 type 1 5 11 . year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. minimal Return just crosswalked geoids true. Otherwise, return fields. remove duplicates. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_tract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosswalk Zip to Tract — hud_cw_zip_tract","text":"function returns dataframe containing crosswalk data zip tract combinations \"zip\", \"year\", \"quarter\" inputs. measurements include res-ratio, bus-ratio, oth-ratio, tot-ratio. details measurements, visit https://www.huduser.gov/portal/dataset/uspszip-api.html","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_cw_zip_tract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosswalk Zip to Tract — hud_cw_zip_tract","text":"","code":"if (FALSE) { library(rhud)  hud_cw_zip_tract(zip = '35213', year = c('2010'), quarter = c('1'))  hud_cw_zip_tract(zip = '35213', year = c('2010'), quarter = c('1'),    minimal = TRUE) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr.html","id":null,"dir":"Reference","previous_headings":"","what":"Omni-Query for US Fair Markets Rent API — hud_fmr","title":"Omni-Query for US Fair Markets Rent API — hud_fmr","text":"function queries Fair Markets Rent API provided US Department Housing Urban Development (HUD USER). Querying state provides list containing two datasets: one FMR county level resolution FMR metroarea level resolution. Querying county (core based statistical areas) cbsa provide data zip code resolution geographic identifiers classified small area.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Omni-Query for US Fair Markets Rent API — hud_fmr","text":"","code":"hud_fmr(   query,   year = format(Sys.Date() - 365, \"%Y\"),   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Omni-Query for US Fair Markets Rent API — hud_fmr","text":"query Can provide either 5 digit FIPS code + 99999 end, state abbreviation, cbsa (core based statistical area) code. year Gets year data recorded. Can specify multiple years. Default previous year. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Omni-Query for US Fair Markets Rent API — hud_fmr","text":"function returns dataframe tibble containing Fair Markets Rent (FMR) data particular county, metroarea, state. county msa level data, measurements include county_name, counties_msa, town_name, metro_status, metro_name, smallarea_status, basicdata, Efficiency, One-Bedroom, Two-Bedroom, Three-Bedroom, Four-Bedroom, year zip code level data considered small area. Otherwise, data returned level queried county metroarea. state level data two dataframes returned. One county level metroarea level data. measurements county/metroarea level data. details measurements, go https://www.huduser.gov/portal/dataset/fmr-api.html.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Omni-Query for US Fair Markets Rent API — hud_fmr","text":"","code":"if (FALSE) {  hud_fmr(\"VA\", year=c(2021))  hud_fmr(\"5100199999\", year=c(2021))  hud_fmr(\"METRO47900M47900\", year=c(2018)) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_county_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Fair Markets Rent County Queries for Zip — hud_fmr_county_zip","title":"Fair Markets Rent County Queries for Zip — hud_fmr_county_zip","text":"function queries county returns FMR calculation. county small area, return single measurement county. county considered small area, return data zip code level.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_county_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fair Markets Rent County Queries for Zip — hud_fmr_county_zip","text":"","code":"hud_fmr_county_zip(   county,   year = format(Sys.Date() - 365, \"%Y\"),   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_county_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fair Markets Rent County Queries for Zip — hud_fmr_county_zip","text":"county county query . Must provided 5 digit fipcode. year Gets year data recorded. Can specify multiple years. Default previous year. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_county_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fair Markets Rent County Queries for Zip — hud_fmr_county_zip","text":"data frame fair markets rent zip codes counties combinations \"county\" \"year\" inputs.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_county_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fair Markets Rent County Queries for Zip — hud_fmr_county_zip","text":"","code":"if (FALSE) { hud_fmr_county_zip(\"5100199999\", year = c(2021))  hud_fmr_county_zip(\"5100199999\", year = c(\"2021\"))  hud_fmr_county_zip(5151099999, year = c(2021)) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_metroarea_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Fair Markets Rent Metroarea Queries for Zip — hud_fmr_metroarea_zip","title":"Fair Markets Rent Metroarea Queries for Zip — hud_fmr_metroarea_zip","text":"function queries metroarea returns FMR calculation. metroarea small area, return single measurement metroarea. metrarea considered small area, return data zip code level.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_metroarea_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fair Markets Rent Metroarea Queries for Zip — hud_fmr_metroarea_zip","text":"","code":"hud_fmr_metroarea_zip(   metroarea,   year = format(Sys.Date() - 365, \"%Y\"),   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_metroarea_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fair Markets Rent Metroarea Queries for Zip — hud_fmr_metroarea_zip","text":"metroarea Metroareas query . year Gets year data recorded. Can specify multiple years. Default previous year. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_metroarea_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fair Markets Rent Metroarea Queries for Zip — hud_fmr_metroarea_zip","text":"data frame fair markets rent zip codes metro areas combinations \"metroarea\" \"year\" inputs.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_metroarea_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fair Markets Rent Metroarea Queries for Zip — hud_fmr_metroarea_zip","text":"","code":"if (FALSE) { hud_fmr_metroarea_zip(\"METRO47900M47900\", year = c(2018))  hud_fmr_metroarea_zip(\"METRO29180N22001\", year = c(2019))  hud_fmr_metroarea_zip(\"METRO10380M10380\", year = c(2020)) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_state_counties.html","id":null,"dir":"Reference","previous_headings":"","what":"Fair Markets Rent State Queries for Counties — hud_fmr_state_counties","title":"Fair Markets Rent State Queries for Counties — hud_fmr_state_counties","text":"function queries state returns (Fair Markets Rent) FMR calculation county resolution counties state input.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_state_counties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fair Markets Rent State Queries for Counties — hud_fmr_state_counties","text":"","code":"hud_fmr_state_counties(   state,   year = format(Sys.Date() - 365, \"%Y\"),   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_state_counties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fair Markets Rent State Queries for Counties — hud_fmr_state_counties","text":"state state(s) query . Can abbreviation, fip code, full name. year Gets year data recorded. Can specify multiple years. Default previous year. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_state_counties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fair Markets Rent State Queries for Counties — hud_fmr_state_counties","text":"data frame fair markets rent counties states combinations \"state\" \"year\" inputs.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_state_counties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fair Markets Rent State Queries for Counties — hud_fmr_state_counties","text":"","code":"if (FALSE) { hud_fmr_state_counties(\"VA\", year = c(2021))  hud_fmr_state_counties(\"Alabama\", year = c(2021))  hud_fmr_state_counties(\"24\", year = c(2021)) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_state_metroareas.html","id":null,"dir":"Reference","previous_headings":"","what":"Fair Markets Rent State Queries for Metroareas — hud_fmr_state_metroareas","title":"Fair Markets Rent State Queries for Metroareas — hud_fmr_state_metroareas","text":"function queries state returns (Fair Markets Rent) FMR calculation metroarea resolution metroareas state query.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_state_metroareas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fair Markets Rent State Queries for Metroareas — hud_fmr_state_metroareas","text":"","code":"hud_fmr_state_metroareas(   state,   year = format(Sys.Date() - 365, \"%Y\"),   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_state_metroareas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fair Markets Rent State Queries for Metroareas — hud_fmr_state_metroareas","text":"state state(s) query . Can abbreviation(s), fip code(s), full name(s). year Gets year data recorded. Can specify multiple year(s). Default previous year. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_state_metroareas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fair Markets Rent State Queries for Metroareas — hud_fmr_state_metroareas","text":"data frame Fair Markets Rent metro areas state(s) combinations \"state\" \"year\" inputs.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_fmr_state_metroareas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fair Markets Rent State Queries for Metroareas — hud_fmr_state_metroareas","text":"","code":"if (FALSE) {  hud_fmr_state_metroareas(\"VA\", year = c(2021))  hud_fmr_state_metroareas(\"Alabama\", year = c(2021))  hud_fmr_state_metroareas(\"24\", year = c(2021))  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_get_cache_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get RHUD Cache Directory — hud_get_cache_dir","title":"Get RHUD Cache Directory — hud_get_cache_dir","text":"Get path rhud using store cached files.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_get_cache_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get RHUD Cache Directory — hud_get_cache_dir","text":"","code":"hud_get_cache_dir()"},{"path":"https://etam4260.github.io/rhud/reference/hud_get_cache_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get RHUD Cache Directory — hud_get_cache_dir","text":"character vector path cached files. none set, default R temp session directory","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_get_cache_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get RHUD Cache Directory — hud_get_cache_dir","text":"","code":"if (FALSE) { hud_get_cache_dir()  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_get_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Get HUD_KEY System Variable — hud_get_key","title":"Get HUD_KEY System Variable — hud_get_key","text":"Return recent key set HUD_KEY environment variable. key set, return \"\".","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_get_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get HUD_KEY System Variable — hud_get_key","text":"","code":"hud_get_key()"},{"path":"https://etam4260.github.io/rhud/reference/hud_get_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get HUD_KEY System Variable — hud_get_key","text":"Returns string.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_get_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get HUD_KEY System Variable — hud_get_key","text":"","code":"if (FALSE) { hud_get_key() }"},{"path":"https://etam4260.github.io/rhud/reference/hud_get_user_agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Get RHUD User Agent — hud_get_user_agent","title":"Get RHUD User Agent — hud_get_user_agent","text":"Get recent user agent set.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_get_user_agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get RHUD User Agent — hud_get_user_agent","text":"","code":"hud_get_user_agent()"},{"path":"https://etam4260.github.io/rhud/reference/hud_get_user_agent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get RHUD User Agent — hud_get_user_agent","text":"character vector user agent used querying HUD User APIs.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_get_user_agent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get RHUD User Agent — hud_get_user_agent","text":"","code":"if (FALSE) {  hud_get_user_agent()  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_il.html","id":null,"dir":"Reference","previous_headings":"","what":"Omni-Query for HUD US Income Limits API — hud_il","title":"Omni-Query for HUD US Income Limits API — hud_il","text":"function queries Income Limits API provided US Department Housing Urban Development (HUD USER).","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_il.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Omni-Query for HUD US Income Limits API — hud_il","text":"","code":"hud_il(   query,   year = format(Sys.Date() - 365, \"%Y\"),   key = Sys.getenv(\"HUD_KEY\"),   to_tibble )"},{"path":"https://etam4260.github.io/rhud/reference/hud_il.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Omni-Query for HUD US Income Limits API — hud_il","text":"query Querying state provides Income Limits measurement state level resolution. Querying county cbsa provide data county cbsa resolution, respectively. year Gets year data recorded. Can specify multiple years. Default previous year. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_il.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Omni-Query for HUD US Income Limits API — hud_il","text":"function returns dataframe tibble containing Income Limits data particular county, metroarea, state. Data returned level queried geoid. measurements include county_name, counties_msa, town_name, metro_status, metro_name, year, median_income, very_low+, extremely_low+, low+. details measurements, go https://www.huduser.gov/portal/dataset/fmr-api.html","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_il.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Omni-Query for HUD US Income Limits API — hud_il","text":"","code":"if (FALSE) {  hud_il(\"VA\", year=c(2021))  hud_il(\"5100199999\", year=c(2021))  hud_il(\"METRO47900M47900\", year=c(2018)) }"},{"path":"https://etam4260.github.io/rhud/reference/hud_nation_states_territories.html","id":null,"dir":"Reference","previous_headings":"","what":"US States and Territories — hud_nation_states_territories","title":"US States and Territories — hud_nation_states_territories","text":"Get list state US territories along corresponding fips code abbreviation.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_nation_states_territories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US States and Territories — hud_nation_states_territories","text":"","code":"hud_nation_states_territories(key = Sys.getenv(\"HUD_KEY\"), to_tibble)"},{"path":"https://etam4260.github.io/rhud/reference/hud_nation_states_territories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"US States and Territories — hud_nation_states_territories","text":"key API key user. must go (US Department Housing Urban Development) HUD USER sign account request API key. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_nation_states_territories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"US States and Territories — hud_nation_states_territories","text":"dataframe containing details states territories US.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_nation_states_territories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"US States and Territories — hud_nation_states_territories","text":"","code":"if (FALSE) { hud_nation_states_territories() }"},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_cw_yr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Most Recently Released Year and Quarter: USPS Crosswalk Files — hud_rec_cw_yr","title":"Get Most Recently Released Year and Quarter: USPS Crosswalk Files — hud_rec_cw_yr","text":"Pings (United States Postal Service) USPS Crosswalk API provided HUD USER determine recently released files. ping last two years every quarter. tests hud_cw_tract_zip(tract = 48201223100) endpoint query.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_cw_yr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Most Recently Released Year and Quarter: USPS Crosswalk Files — hud_rec_cw_yr","text":"","code":"hud_rec_cw_yr(key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_cw_yr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Most Recently Released Year and Quarter: USPS Crosswalk Files — hud_rec_cw_yr","text":"key key obtained HUD (US Department Housing Urban Development) USER website.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_cw_yr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Most Recently Released Year and Quarter: USPS Crosswalk Files — hud_rec_cw_yr","text":"recent year quarter available (United States Postal Service)  USPS Crosswalk files.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_cw_yr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Most Recently Released Year and Quarter: USPS Crosswalk Files — hud_rec_cw_yr","text":"","code":"if (FALSE) {  hud_rec_cw_yr()  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_fmr_yr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Most Recently Released Year: Fair Markets Rent — hud_rec_fmr_yr","title":"Get Most Recently Released Year: Fair Markets Rent — hud_rec_fmr_yr","text":"Pings Fair Markets Rent API provided (US Department Housing Urban Development) HUD User determine recently released files. ping last two years. return years state, county, metroarea resolutions.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_fmr_yr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Most Recently Released Year: Fair Markets Rent — hud_rec_fmr_yr","text":"","code":"hud_rec_fmr_yr(key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_fmr_yr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Most Recently Released Year: Fair Markets Rent — hud_rec_fmr_yr","text":"key key obtained HUD (US Department Housing Urban Development) USER website.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_fmr_yr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Most Recently Released Year: Fair Markets Rent — hud_rec_fmr_yr","text":"recent year fmr files state, county, metroarea queries.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_fmr_yr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Most Recently Released Year: Fair Markets Rent — hud_rec_fmr_yr","text":"","code":"if (FALSE) {  hud_rec_fmr_yr()  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_il_yr-open-paren-close-paren.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Most Recently Released Year: Income Limits — hud_rec_il_yr()","title":"Get Most Recently Released Year: Income Limits — hud_rec_il_yr()","text":"Pings Income Limits API provided HUD User determine recently released files. ping last two years. return years state, county, metroarea resolution.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_il_yr-open-paren-close-paren.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Most Recently Released Year: Income Limits — hud_rec_il_yr()","text":"","code":"hud_rec_il_yr(key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_il_yr-open-paren-close-paren.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Most Recently Released Year: Income Limits — hud_rec_il_yr()","text":"key key obtained HUD (US Department Housing Urban Development) USER website.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_il_yr-open-paren-close-paren.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Most Recently Released Year: Income Limits — hud_rec_il_yr()","text":"recent year Income Limits state, county, metroarea queries.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_rec_il_yr-open-paren-close-paren.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Most Recently Released Year: Income Limits — hud_rec_il_yr()","text":"","code":"if (FALSE) {  hud_rec_il_yr()  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_set_cache_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Set RHUD Cache Directory — hud_set_cache_dir","title":"Set RHUD Cache Directory — hud_set_cache_dir","text":"Set caching directory store data retrieved using rhud API calls. default, rhud uses non-persistent temporary directory given R session. However, possible user might want save queried data custom location persistent. function allows users set cache directory. user can also store preferred path .RProfile rhud remember set preference directory throughout sessions. Make sure path valid sensitive location. Windows users: please note need use double-backslashes forward slashes specifying cache directory's path R. create folder called rhud_cache specified path setting new directory, previous cache cleaned. future update garbage collection option.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_set_cache_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set RHUD Cache Directory — hud_set_cache_dir","text":"","code":"hud_set_cache_dir(path, in_wkdir = FALSE, in_home = FALSE)"},{"path":"https://etam4260.github.io/rhud/reference/hud_set_cache_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set RHUD Cache Directory — hud_set_cache_dir","text":"path full path desired cache directory. one can set time. path specified, use temp directory R. temp directory persistent. in_wkdir Store path environment variable working directory .Rprofile rhud cache specified path. in_home Store path environment variable HOME directory .Rprofile rhud cache specified path.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_set_cache_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set RHUD Cache Directory — hud_set_cache_dir","text":"","code":"if (FALSE) {  hud_set_cache_dir(\"./an/example/path\", in_wkdir = TRUE, in_home = TRUE)  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_set_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Set HUD_KEY System Variable — hud_set_key","title":"Set HUD_KEY System Variable — hud_set_key","text":"wrapper around Sys.getenv() set HUD_KEY environment variable. Allows user also set key .RProfile working HOME.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_set_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set HUD_KEY System Variable — hud_set_key","text":"","code":"hud_set_key(key, in_wkdir = FALSE, in_home = FALSE)"},{"path":"https://etam4260.github.io/rhud/reference/hud_set_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set HUD_KEY System Variable — hud_set_key","text":"key key obtained https://www.huduser.gov/hudapi/public/register?comingfrom=1 in_wkdir set key user's .RProfile directory. defaulted false. in_home set key user's HOME directory. defaulted false.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_set_user_agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Set RHUD User Agent — hud_set_user_agent","title":"Set RHUD User Agent — hud_set_user_agent","text":"Set user agent querying HUD User APIs.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_set_user_agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set RHUD User Agent — hud_set_user_agent","text":"","code":"hud_set_user_agent(user_agent, in_wkdir = FALSE, in_home = FALSE)"},{"path":"https://etam4260.github.io/rhud/reference/hud_set_user_agent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set RHUD User Agent — hud_set_user_agent","text":"user_agent character vector user agent. in_wkdir set key user's .RProfile directory. defaulted false. in_home set key user's HOME directory. defaulted false.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_set_user_agent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set RHUD User Agent — hud_set_user_agent","text":"","code":"if (FALSE) {  hud_set_user_agent(\"im-the-user\")  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_state_counties.html","id":null,"dir":"Reference","previous_headings":"","what":"US Counties — hud_state_counties","title":"US Counties — hud_state_counties","text":"Get dataframe details describing county(s) located within queried state(s).","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_state_counties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US Counties — hud_state_counties","text":"","code":"hud_state_counties(state, key = Sys.getenv(\"HUD_KEY\"), to_tibble)"},{"path":"https://etam4260.github.io/rhud/reference/hud_state_counties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"US Counties — hud_state_counties","text":"state state(s) get county(s). key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_state_counties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"US Counties — hud_state_counties","text":"dataframe containing counties within state(s).","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_state_counties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"US Counties — hud_state_counties","text":"","code":"if (FALSE) { hud_state_counties(\"CA\") hud_state_counties(\"Virginia\") hud_state_counties(\"51\") }"},{"path":"https://etam4260.github.io/rhud/reference/hud_state_metropolitan.html","id":null,"dir":"Reference","previous_headings":"","what":"US Metropolitan Areas — hud_state_metropolitan","title":"US Metropolitan Areas — hud_state_metropolitan","text":"Get details metropolitan areas queried states name (core based statistical area) cbsa code.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_state_metropolitan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US Metropolitan Areas — hud_state_metropolitan","text":"","code":"hud_state_metropolitan(state, key = Sys.getenv(\"HUD_KEY\"), to_tibble)"},{"path":"https://etam4260.github.io/rhud/reference/hud_state_metropolitan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"US Metropolitan Areas — hud_state_metropolitan","text":"state state get metropolitan areas. Can provided full name, fip code abbreviation. key API key user. must go HUD sign account request API key. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_state_metropolitan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"US Metropolitan Areas — hud_state_metropolitan","text":"dataframe containing details metropolitan areas state(s)","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_state_metropolitan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"US Metropolitan Areas — hud_state_metropolitan","text":"","code":"if (FALSE) {  hud_state_metropolitan(\"VA\")  }"},{"path":"https://etam4260.github.io/rhud/reference/hud_state_minor_civil_divisions.html","id":null,"dir":"Reference","previous_headings":"","what":"US Minor Civil Divisions — hud_state_minor_civil_divisions","title":"US Minor Civil Divisions — hud_state_minor_civil_divisions","text":"Get list minor civil divisions state","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_state_minor_civil_divisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US Minor Civil Divisions — hud_state_minor_civil_divisions","text":"","code":"hud_state_minor_civil_divisions(state, key = Sys.getenv(\"HUD_KEY\"), to_tibble)"},{"path":"https://etam4260.github.io/rhud/reference/hud_state_minor_civil_divisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"US Minor Civil Divisions — hud_state_minor_civil_divisions","text":"state state get mcd(s). key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_state_minor_civil_divisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"US Minor Civil Divisions — hud_state_minor_civil_divisions","text":"dataframe containing details minor civil divisions state(s).","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_state_minor_civil_divisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"US Minor Civil Divisions — hud_state_minor_civil_divisions","text":"","code":"if (FALSE) { hud_state_minor_civil_divisions(\"CA\") hud_state_minor_civil_divisions(\"Virginia\") hud_state_minor_civil_divisions(\"51\") }"},{"path":"https://etam4260.github.io/rhud/reference/hud_state_places.html","id":null,"dir":"Reference","previous_headings":"","what":"US Places — hud_state_places","title":"US Places — hud_state_places","text":"Get list places state(s).","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_state_places.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US Places — hud_state_places","text":"","code":"hud_state_places(state, key = Sys.getenv(\"HUD_KEY\"), to_tibble)"},{"path":"https://etam4260.github.io/rhud/reference/hud_state_places.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"US Places — hud_state_places","text":"state state(s) get places. key key obtained HUD (US Department Housing Urban Development) USER website. to_tibble TRUE, return data tibble format rather data frame.","code":""},{"path":"https://etam4260.github.io/rhud/reference/hud_state_places.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"US Places — hud_state_places","text":"dataframe containing details places state(s).","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/hud_state_places.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"US Places — hud_state_places","text":"","code":"if (FALSE) { hud_state_places(\"CA\") hud_state_places(\"Virginia\") hud_state_places(\"51\") }"},{"path":"https://etam4260.github.io/rhud/reference/rhud-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rhud: A R Interface to the US Department of Housing and Urban\nDevelopment APIs — rhud-package","title":"rhud: A R Interface to the US Department of Housing and Urban\nDevelopment APIs — rhud-package","text":"rhud R library allows users easily download data US Department Housing Urban Development APIs @ HUD User. data defaulted return measurements prior year (year 365 days ago current system date). details package well details python counterpart, visit https://github.com/etam4260/rhud default return type data dataframe. get tibbles instead, use: options(rhud_use_tibble = TRUE)","code":""},{"path":"https://etam4260.github.io/rhud/reference/rhud-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rhud: A R Interface to the US Department of Housing and Urban\nDevelopment APIs — rhud-package","text":"Emmet Tam","code":""},{"path":"https://etam4260.github.io/rhud/reference/rhud_website.html","id":null,"dir":"Reference","previous_headings":"","what":"Access RHUD Web Resources — rhud_website","title":"Access RHUD Web Resources — rhud_website","text":"Quickly get documentation rhud package opening websites associated .","code":""},{"path":"https://etam4260.github.io/rhud/reference/rhud_website.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access RHUD Web Resources — rhud_website","text":"","code":"rhud_website(website = c(\"github-pages\", \"github\"))"},{"path":"https://etam4260.github.io/rhud/reference/rhud_website.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access RHUD Web Resources — rhud_website","text":"website websites available. \"github-pages\" \"github\"","code":""},{"path":"https://etam4260.github.io/rhud/reference/rhud_website.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access RHUD Web Resources — rhud_website","text":"","code":"if (FALSE) { rhud_website(\"github-pages\") rhud_website(\"github\") rhud_website() }"},{"path":"https://etam4260.github.io/rhud/reference/trt_in_z.html","id":null,"dir":"Reference","previous_headings":"","what":"Tract Addresses in Zip Addresses? — trt_in_z","title":"Tract Addresses in Zip Addresses? — trt_in_z","text":"Given tract(s) zip code(s), determine overlap using (United States Postal Service) USPS Crosswalk files. Overlap described residential, business, , total addresses reside .","code":""},{"path":"https://etam4260.github.io/rhud/reference/trt_in_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tract Addresses in Zip Addresses? — trt_in_z","text":"","code":"trt_in_z(tract, zip, year, quarter, key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/trt_in_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tract Addresses in Zip Addresses? — trt_in_z","text":"tract tract(s) determine overlap zip(s). zip zip(s) determine overlap tract(s). year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key API key user. must go HUD sign account request API key.","code":""},{"path":"https://etam4260.github.io/rhud/reference/trt_in_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tract Addresses in Zip Addresses? — trt_in_z","text":"tract(s) exist zip(s) specified, TRUE returned.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/trt_in_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tract Addresses in Zip Addresses? — trt_in_z","text":"","code":"if (FALSE) {  trt_in_z(tract = 22031950600, zip = 71052, year = 2019, quarter = 2)  }"},{"path":"https://etam4260.github.io/rhud/reference/z_in_cbsa.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip Addresses in CBSA Addresses? — z_in_cbsa","title":"Zip Addresses in CBSA Addresses? — z_in_cbsa","text":"Given zip code(s) cbsa(s), determine overlap using (United States Postal Service) USPS Crosswalk files. Overlap described residential, business, , total addresses reside .","code":""},{"path":"https://etam4260.github.io/rhud/reference/z_in_cbsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip Addresses in CBSA Addresses? — z_in_cbsa","text":"","code":"z_in_cbsa(zip, cbsa, year, quarter, key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/z_in_cbsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip Addresses in CBSA Addresses? — z_in_cbsa","text":"zip zip(s) determine overlap cbsa(s). cbsa cbsa(s) determine overlap zip(s). year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key API key user. must go HUD sign account request API key.","code":""},{"path":"https://etam4260.github.io/rhud/reference/z_in_cbsa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip Addresses in CBSA Addresses? — z_in_cbsa","text":"zip(s) exist cbsa(s) specified, TRUE returned.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/z_in_cbsa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip Addresses in CBSA Addresses? — z_in_cbsa","text":"","code":"if (FALSE) {  z_in_cbsa(zip = 71052, cbsa = 43340, year = 2019, quarter = 2)  }"},{"path":"https://etam4260.github.io/rhud/reference/z_in_cbsadiv.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip Addresses in CBSAdiv Addresses? — z_in_cbsadiv","title":"Zip Addresses in CBSAdiv Addresses? — z_in_cbsadiv","text":"Given zip code(s) cbsadiv(s), determine overlap using (United States Postal Service) USPS Crosswalk files. Overlap described residential, business, , total addresses reside .","code":""},{"path":"https://etam4260.github.io/rhud/reference/z_in_cbsadiv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip Addresses in CBSAdiv Addresses? — z_in_cbsadiv","text":"","code":"z_in_cbsadiv(zip, cbsadiv, year, quarter, key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/z_in_cbsadiv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip Addresses in CBSAdiv Addresses? — z_in_cbsadiv","text":"zip zip(s) determine overlap cbsadiv(s). cbsadiv cbsadiv(s) determine overlap zip(s). year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key API key user. must go HUD sign account request API key.","code":""},{"path":"https://etam4260.github.io/rhud/reference/z_in_cbsadiv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip Addresses in CBSAdiv Addresses? — z_in_cbsadiv","text":"zip(s) exist cbsadiv(s) specified, TRUE returned.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/z_in_cbsadiv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip Addresses in CBSAdiv Addresses? — z_in_cbsadiv","text":"","code":"if (FALSE) {   z_in_cbsadiv(zip = 71052, cbsadiv = 43340, year = 2017, quarter = 4)  }"},{"path":"https://etam4260.github.io/rhud/reference/z_in_cd.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip Addresses in Congressional District Addresses? — z_in_cd","title":"Zip Addresses in Congressional District Addresses? — z_in_cd","text":"Given zip code(s) congressional district(s), determine overlap using (United States Postal Service) USPS Crosswalk files. Overlap described residential, business, , total addresses reside .","code":""},{"path":"https://etam4260.github.io/rhud/reference/z_in_cd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip Addresses in Congressional District Addresses? — z_in_cd","text":"","code":"z_in_cd(zip, cd, year, quarter, key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/z_in_cd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip Addresses in Congressional District Addresses? — z_in_cd","text":"zip zip(s) determine overlap cd(s). cd cd(s) determine overlap zip(s). year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key API key user. must go HUD sign account request API key.","code":""},{"path":"https://etam4260.github.io/rhud/reference/z_in_cd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip Addresses in Congressional District Addresses? — z_in_cd","text":"zip(s) exist cd(s) specified, TRUE returned.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/z_in_cd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip Addresses in Congressional District Addresses? — z_in_cd","text":"","code":"if (FALSE) {  z_in_cd(zip = 35213, cd = 2204, year = 2019, quarter = 2)  }"},{"path":"https://etam4260.github.io/rhud/reference/z_in_cty.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip Addresses in County Addresses? — z_in_cty","title":"Zip Addresses in County Addresses? — z_in_cty","text":"Given zip code(s) county(s), determine overlap using (United States Postal Service) USPS Crosswalk files. Overlap described residential, business, , total addresses reside .","code":""},{"path":"https://etam4260.github.io/rhud/reference/z_in_cty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip Addresses in County Addresses? — z_in_cty","text":"","code":"z_in_cty(zip, county, year, quarter, key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/z_in_cty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip Addresses in County Addresses? — z_in_cty","text":"zip zip(s) determine overlap county(s). county county(s) determine overlap zip(s). year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key API key user. must go HUD sign account request API key.","code":""},{"path":"https://etam4260.github.io/rhud/reference/z_in_cty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip Addresses in County Addresses? — z_in_cty","text":"zip(s) exist county(s) specified, TRUE returned.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/z_in_cty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip Addresses in County Addresses? — z_in_cty","text":"","code":"if (FALSE) {  z_in_cty(zip = 71052, county = 22031, year = 2019, quarter = 2)  }"},{"path":"https://etam4260.github.io/rhud/reference/z_in_ctysb.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip Addresses in Countysub Addresses? — z_in_ctysb","title":"Zip Addresses in Countysub Addresses? — z_in_ctysb","text":"Given zip code(s) countysub(s), determine overlap using (United States Postal Service) USPS Crosswalk files. Overlap described residential, business, , total addresses reside .","code":""},{"path":"https://etam4260.github.io/rhud/reference/z_in_ctysb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip Addresses in Countysub Addresses? — z_in_ctysb","text":"","code":"z_in_ctysb(zip, countysub, year, quarter, key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/z_in_ctysb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip Addresses in Countysub Addresses? — z_in_ctysb","text":"zip zip(s) determine overlap countysub(s). countysub countysub(s) determine overlap zip(s). year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key API key user. must go HUD sign account request API key.","code":""},{"path":"https://etam4260.github.io/rhud/reference/z_in_ctysb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip Addresses in Countysub Addresses? — z_in_ctysb","text":"zip(s) exist countysub(s) specified, TRUE returned.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/z_in_ctysb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip Addresses in Countysub Addresses? — z_in_ctysb","text":"","code":"if (FALSE) {  z_in_ctysb(zip = 35213, countysub = \"0107390324\", year = 2019, quarter = 2)  }"},{"path":"https://etam4260.github.io/rhud/reference/z_in_trt.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip Addresses in Tract Addresses? — z_in_trt","title":"Zip Addresses in Tract Addresses? — z_in_trt","text":"Given zip code(s) tract(s), determine overlap using (United States Postal Service) USPS Crosswalk files. Overlap described residential, business, , total addresses reside .","code":""},{"path":"https://etam4260.github.io/rhud/reference/z_in_trt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip Addresses in Tract Addresses? — z_in_trt","text":"","code":"z_in_trt(zip, tract, year, quarter, key = Sys.getenv(\"HUD_KEY\"))"},{"path":"https://etam4260.github.io/rhud/reference/z_in_trt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip Addresses in Tract Addresses? — z_in_trt","text":"zip zip(s) determine overlap tract(s). tract tract(s) determine overlap zip(s). year Gets year data recorded. Can specify multiple years. Default previous year. quarter Gets quarter year data recorded. Defaults first quarter year. key API key user. must go HUD sign account request API key.","code":""},{"path":"https://etam4260.github.io/rhud/reference/z_in_trt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip Addresses in Tract Addresses? — z_in_trt","text":"zip(s) exist tract(s) specified, TRUE returned.","code":""},{"path":[]},{"path":"https://etam4260.github.io/rhud/reference/z_in_trt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip Addresses in Tract Addresses? — z_in_trt","text":"","code":"if (FALSE) {  z_in_trt(zip = 71052, tract = 22031950600, year = 2019, quarter = 2)  }"}]
